/*
 * Generated by gen_defines.py
 *
 * DTS input file:
 *   /home/trevor/Dev/zephyr/tut01/build/zephyr/zephyr.dts.pre
 *
 * Directories with bindings:
 *   $ZEPHYR_BASE/dts/bindings
 *
 * Node dependency ordering (ordinal and path):
 *   0   /
 *   1   /aliases
 *   2   /chosen
 *   3   /wifi
 *   4   /cpus
 *   5   /cpus/cpu@0
 *   6   /cpus/cpu@1
 *   7   /leds
 *   8   /soc
 *   9   /soc/interrupt-controller@3ff00104
 *   10  /soc/gpio@3ff44000
 *   11  /leds/led_0
 *   12  /leds/led_1
 *   13  /leds/led_2
 *   14  /leds/ledgp1
 *   15  /soc/counter@3ff5f000
 *   16  /soc/counter@3ff5f024
 *   17  /soc/counter@3ff60000
 *   18  /soc/counter@3ff60024
 *   19  /soc/gpio@3ff44800
 *   20  /soc/rtc@3ff48000
 *   21  /soc/i2c@3ff53000
 *   22  /soc/i2c@3ff67000
 *   23  /soc/ipi@3f4c0058
 *   24  /soc/ipi@3f4c005c
 *   25  /soc/ledc@3ff59000
 *   26  /soc/memory@3ffb0000
 *   27  /soc/pinmux@3ff49000
 *   28  /soc/spi@3ff64000
 *   29  /soc/trng@3ff75144
 *   30  /soc/uart@3ff40000
 *   31  /soc/uart@3ff50000
 *   32  /soc/uart@3ff6e000
 *   33  /soc/watchdog@3ff5f048
 *   34  /soc/watchdog@3ff60048
 *   35  /soc/flash-controller@3ff42000
 *   36  /soc/flash-controller@3ff42000/flash@0
 *   37  /soc/flash-controller@3ff42000/flash@0/partitions
 *   38  /soc/flash-controller@3ff42000/flash@0/partitions/partition@1000
 *   39  /soc/flash-controller@3ff42000/flash@0/partitions/partition@10000
 *   40  /soc/flash-controller@3ff42000/flash@0/partitions/partition@110000
 *   41  /soc/flash-controller@3ff42000/flash@0/partitions/partition@210000
 *   42  /soc/flash-controller@3ff42000/flash@0/partitions/partition@250000
 *   43  /soc/spi@3ff65000
 *   44  /soc/spi@3ff65000/ili9341@0
 *
 * Definitions derived from these nodes in dependency order are next,
 * followed by /chosen nodes.
 */

/*
 * Devicetree node: /
 *
 * Node identifier: DT_N
 */

/* Node's full path: */
#define DT_N_PATH "/"

/* Node's name with unit-address: */
#define DT_N_FULL_NAME "/"
#define DT_N_FOREACH_CHILD(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_cpus) fn(DT_N_S_wifi) fn(DT_N_S_leds)
#define DT_N_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_wifi, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_cpus) fn(DT_N_S_leds) 
#define DT_N_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_ORD 0

/* Ordinals for what this node depends on directly: */
#define DT_N_REQUIRES_ORDS /* nothing */

/* Ordinals for what depends directly on this node: */
#define DT_N_SUPPORTS_ORDS \
	1, /* /aliases */ \
	2, /* /chosen */ \
	3, /* /wifi */ \
	4, /* /cpus */ \
	7, /* /leds */ \
	8, /* /soc */

/* Existence and alternate IDs: */
#define DT_N_EXISTS 1
#define DT_N_INST_0_espressif_esp32 DT_N

/* Macros for properties that are special in the specification: */
#define DT_N_REG_NUM 0
#define DT_N_RANGES_NUM 0
#define DT_N_FOREACH_RANGE(fn) 
#define DT_N_IRQ_NUM 0
#define DT_N_COMPAT_MATCHES_espressif_esp32 1
#define DT_N_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_P_compatible {"espressif,esp32"}
#define DT_N_P_compatible_IDX_0 "espressif,esp32"
#define DT_N_P_compatible_IDX_0_EXISTS 1
#define DT_N_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N, compatible, 0)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N, compatible, 0, __VA_ARGS__)
#define DT_N_P_compatible_LEN 1
#define DT_N_P_compatible_EXISTS 1

/*
 * Devicetree node: /aliases
 *
 * Node identifier: DT_N_S_aliases
 */

/* Node's full path: */
#define DT_N_S_aliases_PATH "/aliases"

/* Node's name with unit-address: */
#define DT_N_S_aliases_FULL_NAME "aliases"

/* Node parent (/) identifier: */
#define DT_N_S_aliases_PARENT DT_N
#define DT_N_S_aliases_FOREACH_CHILD(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_aliases_ORD 1

/* Ordinals for what this node depends on directly: */
#define DT_N_S_aliases_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_aliases_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_aliases_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_aliases_REG_NUM 0
#define DT_N_S_aliases_RANGES_NUM 0
#define DT_N_S_aliases_FOREACH_RANGE(fn) 
#define DT_N_S_aliases_IRQ_NUM 0
#define DT_N_S_aliases_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_aliases_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /chosen
 *
 * Node identifier: DT_N_S_chosen
 */

/* Node's full path: */
#define DT_N_S_chosen_PATH "/chosen"

/* Node's name with unit-address: */
#define DT_N_S_chosen_FULL_NAME "chosen"

/* Node parent (/) identifier: */
#define DT_N_S_chosen_PARENT DT_N
#define DT_N_S_chosen_FOREACH_CHILD(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_chosen_ORD 2

/* Ordinals for what this node depends on directly: */
#define DT_N_S_chosen_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_chosen_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_chosen_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_chosen_REG_NUM 0
#define DT_N_S_chosen_RANGES_NUM 0
#define DT_N_S_chosen_FOREACH_RANGE(fn) 
#define DT_N_S_chosen_IRQ_NUM 0
#define DT_N_S_chosen_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_chosen_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /wifi
 *
 * Node identifier: DT_N_S_wifi
 */

/* Node's full path: */
#define DT_N_S_wifi_PATH "/wifi"

/* Node's name with unit-address: */
#define DT_N_S_wifi_FULL_NAME "wifi"

/* Node parent (/) identifier: */
#define DT_N_S_wifi_PARENT DT_N
#define DT_N_S_wifi_FOREACH_CHILD(fn) 
#define DT_N_S_wifi_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_wifi_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_wifi_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_wifi_ORD 3

/* Ordinals for what this node depends on directly: */
#define DT_N_S_wifi_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_wifi_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_wifi_EXISTS 1
#define DT_N_INST_0_espressif_esp32_wifi DT_N_S_wifi
#define DT_N_NODELABEL_wifi              DT_N_S_wifi

/* Macros for properties that are special in the specification: */
#define DT_N_S_wifi_REG_NUM 0
#define DT_N_S_wifi_RANGES_NUM 0
#define DT_N_S_wifi_FOREACH_RANGE(fn) 
#define DT_N_S_wifi_IRQ_NUM 0
#define DT_N_S_wifi_COMPAT_MATCHES_espressif_esp32_wifi 1
#define DT_N_S_wifi_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_wifi_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_wifi_P_compatible {"espressif,esp32-wifi"}
#define DT_N_S_wifi_P_compatible_IDX_0 "espressif,esp32-wifi"
#define DT_N_S_wifi_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_wifi_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_wifi, compatible, 0)
#define DT_N_S_wifi_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_wifi, compatible, 0, __VA_ARGS__)
#define DT_N_S_wifi_P_compatible_LEN 1
#define DT_N_S_wifi_P_compatible_EXISTS 1
#define DT_N_S_wifi_P_status "disabled"
#define DT_N_S_wifi_P_status_STRING_TOKEN disabled
#define DT_N_S_wifi_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_wifi_P_status_ENUM_IDX 2
#define DT_N_S_wifi_P_status_ENUM_TOKEN disabled
#define DT_N_S_wifi_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_wifi_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_wifi, status, 0) \
	fn(DT_N_S_wifi, status, 1) \
	fn(DT_N_S_wifi, status, 2) \
	fn(DT_N_S_wifi, status, 3) \
	fn(DT_N_S_wifi, status, 4) \
	fn(DT_N_S_wifi, status, 5) \
	fn(DT_N_S_wifi, status, 6) \
	fn(DT_N_S_wifi, status, 7)
#define DT_N_S_wifi_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_wifi, status, 0, __VA_ARGS__) \
	fn(DT_N_S_wifi, status, 1, __VA_ARGS__) \
	fn(DT_N_S_wifi, status, 2, __VA_ARGS__) \
	fn(DT_N_S_wifi, status, 3, __VA_ARGS__) \
	fn(DT_N_S_wifi, status, 4, __VA_ARGS__) \
	fn(DT_N_S_wifi, status, 5, __VA_ARGS__) \
	fn(DT_N_S_wifi, status, 6, __VA_ARGS__) \
	fn(DT_N_S_wifi, status, 7, __VA_ARGS__)
#define DT_N_S_wifi_P_status_EXISTS 1

/*
 * Devicetree node: /cpus
 *
 * Node identifier: DT_N_S_cpus
 */

/* Node's full path: */
#define DT_N_S_cpus_PATH "/cpus"

/* Node's name with unit-address: */
#define DT_N_S_cpus_FULL_NAME "cpus"

/* Node parent (/) identifier: */
#define DT_N_S_cpus_PARENT DT_N
#define DT_N_S_cpus_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_cpu_1)
#define DT_N_S_cpus_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_1, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_cpu_1) 
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_1, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_ORD 4

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_SUPPORTS_ORDS \
	5, /* /cpus/cpu@0 */ \
	6, /* /cpus/cpu@1 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_REG_NUM 0
#define DT_N_S_cpus_RANGES_NUM 0
#define DT_N_S_cpus_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_IRQ_NUM 0
#define DT_N_S_cpus_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /cpus/cpu@0
 *
 * Node identifier: DT_N_S_cpus_S_cpu_0
 *
 * Binding (compatible = cdns,tensilica-xtensa-lx6):
 *   $ZEPHYR_BASE/dts/bindings/cpu/cdns,tensilica-xtensa-lx6.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_0_PATH "/cpus/cpu@0"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_0_FULL_NAME "cpu@0"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_0_PARENT DT_N_S_cpus
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_0_ORD 5

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_0_REQUIRES_ORDS \
	4, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_0_EXISTS 1
#define DT_N_INST_0_cdns_tensilica_xtensa_lx6 DT_N_S_cpus_S_cpu_0
#define DT_N_NODELABEL_cpu0                   DT_N_S_cpus_S_cpu_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_0_REG_NUM 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_cpus_S_cpu_0_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_0_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_0_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_0_COMPAT_MATCHES_cdns_tensilica_xtensa_lx6 1
#define DT_N_S_cpus_S_cpu_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_0_P_clock_frequency 240
#define DT_N_S_cpus_S_cpu_0_P_clock_frequency_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible {"cdns,tensilica-xtensa-lx6"}
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0 "cdns,tensilica-xtensa-lx6"
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg {0 /* 0x0 */}
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0 0
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, reg, 0)
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@1
 *
 * Node identifier: DT_N_S_cpus_S_cpu_1
 *
 * Binding (compatible = cdns,tensilica-xtensa-lx6):
 *   $ZEPHYR_BASE/dts/bindings/cpu/cdns,tensilica-xtensa-lx6.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_1_PATH "/cpus/cpu@1"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_1_FULL_NAME "cpu@1"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_1_PARENT DT_N_S_cpus
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_1_ORD 6

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_1_REQUIRES_ORDS \
	4, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_1_EXISTS 1
#define DT_N_INST_1_cdns_tensilica_xtensa_lx6 DT_N_S_cpus_S_cpu_1
#define DT_N_NODELABEL_cpu1                   DT_N_S_cpus_S_cpu_1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_1_REG_NUM 1
#define DT_N_S_cpus_S_cpu_1_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_REG_IDX_0_VAL_ADDRESS 1 /* 0x1 */
#define DT_N_S_cpus_S_cpu_1_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_1_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_1_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_1_COMPAT_MATCHES_cdns_tensilica_xtensa_lx6 1
#define DT_N_S_cpus_S_cpu_1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_1_P_clock_frequency 240
#define DT_N_S_cpus_S_cpu_1_P_clock_frequency_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_compatible {"cdns,tensilica-xtensa-lx6"}
#define DT_N_S_cpus_S_cpu_1_P_compatible_IDX_0 "cdns,tensilica-xtensa-lx6"
#define DT_N_S_cpus_S_cpu_1_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_1, compatible, 0)
#define DT_N_S_cpus_S_cpu_1_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_1, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_1_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_1_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_reg {1 /* 0x1 */}
#define DT_N_S_cpus_S_cpu_1_P_reg_IDX_0 1
#define DT_N_S_cpus_S_cpu_1_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_1, reg, 0)
#define DT_N_S_cpus_S_cpu_1_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_1, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_1_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_1_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /leds
 *
 * Node identifier: DT_N_S_leds
 *
 * Binding (compatible = gpio-leds):
 *   $ZEPHYR_BASE/dts/bindings/gpio/gpio-leds.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_PATH "/leds"

/* Node's name with unit-address: */
#define DT_N_S_leds_FULL_NAME "leds"

/* Node parent (/) identifier: */
#define DT_N_S_leds_PARENT DT_N
#define DT_N_S_leds_FOREACH_CHILD(fn) fn(DT_N_S_leds_S_led_0) fn(DT_N_S_leds_S_led_1) fn(DT_N_S_leds_S_led_2) fn(DT_N_S_leds_S_ledgp1)
#define DT_N_S_leds_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__) fn(DT_N_S_leds_S_led_1, __VA_ARGS__) fn(DT_N_S_leds_S_led_2, __VA_ARGS__) fn(DT_N_S_leds_S_ledgp1, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_leds_S_led_0) fn(DT_N_S_leds_S_led_1) fn(DT_N_S_leds_S_led_2) fn(DT_N_S_leds_S_ledgp1) 
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__) fn(DT_N_S_leds_S_led_1, __VA_ARGS__) fn(DT_N_S_leds_S_led_2, __VA_ARGS__) fn(DT_N_S_leds_S_ledgp1, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_leds_ORD 7

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_SUPPORTS_ORDS \
	11, /* /leds/led_0 */ \
	12, /* /leds/led_1 */ \
	13, /* /leds/led_2 */ \
	14, /* /leds/ledgp1 */

/* Existence and alternate IDs: */
#define DT_N_S_leds_EXISTS 1
#define DT_N_INST_0_gpio_leds DT_N_S_leds

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_REG_NUM 0
#define DT_N_S_leds_RANGES_NUM 0
#define DT_N_S_leds_FOREACH_RANGE(fn) 
#define DT_N_S_leds_IRQ_NUM 0
#define DT_N_S_leds_COMPAT_MATCHES_gpio_leds 1
#define DT_N_S_leds_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /soc
 *
 * Node identifier: DT_N_S_soc
 */

/* Node's full path: */
#define DT_N_S_soc_PATH "/soc"

/* Node's name with unit-address: */
#define DT_N_S_soc_FULL_NAME "soc"

/* Node parent (/) identifier: */
#define DT_N_S_soc_PARENT DT_N
#define DT_N_S_soc_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_memory_3ffb0000) fn(DT_N_S_soc_S_interrupt_controller_3ff00104) fn(DT_N_S_soc_S_rtc_3ff48000) fn(DT_N_S_soc_S_flash_controller_3ff42000) fn(DT_N_S_soc_S_ipi_3f4c0058) fn(DT_N_S_soc_S_ipi_3f4c005c) fn(DT_N_S_soc_S_uart_3ff40000) fn(DT_N_S_soc_S_uart_3ff50000) fn(DT_N_S_soc_S_uart_3ff6e000) fn(DT_N_S_soc_S_pinmux_3ff49000) fn(DT_N_S_soc_S_ledc_3ff59000) fn(DT_N_S_soc_S_gpio_3ff44000) fn(DT_N_S_soc_S_gpio_3ff44800) fn(DT_N_S_soc_S_i2c_3ff53000) fn(DT_N_S_soc_S_i2c_3ff67000) fn(DT_N_S_soc_S_trng_3ff75144) fn(DT_N_S_soc_S_watchdog_3ff5f048) fn(DT_N_S_soc_S_watchdog_3ff60048) fn(DT_N_S_soc_S_spi_3ff64000) fn(DT_N_S_soc_S_spi_3ff65000) fn(DT_N_S_soc_S_counter_3ff5f000) fn(DT_N_S_soc_S_counter_3ff5f024) fn(DT_N_S_soc_S_counter_3ff60000) fn(DT_N_S_soc_S_counter_3ff60024)
#define DT_N_S_soc_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_3ffb0000, __VA_ARGS__) fn(DT_N_S_soc_S_interrupt_controller_3ff00104, __VA_ARGS__) fn(DT_N_S_soc_S_rtc_3ff48000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000, __VA_ARGS__) fn(DT_N_S_soc_S_ipi_3f4c0058, __VA_ARGS__) fn(DT_N_S_soc_S_ipi_3f4c005c, __VA_ARGS__) fn(DT_N_S_soc_S_uart_3ff40000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_3ff50000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_3ff6e000, __VA_ARGS__) fn(DT_N_S_soc_S_pinmux_3ff49000, __VA_ARGS__) fn(DT_N_S_soc_S_ledc_3ff59000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_3ff44000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_3ff44800, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_3ff53000, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_3ff67000, __VA_ARGS__) fn(DT_N_S_soc_S_trng_3ff75144, __VA_ARGS__) fn(DT_N_S_soc_S_watchdog_3ff5f048, __VA_ARGS__) fn(DT_N_S_soc_S_watchdog_3ff60048, __VA_ARGS__) fn(DT_N_S_soc_S_spi_3ff64000, __VA_ARGS__) fn(DT_N_S_soc_S_spi_3ff65000, __VA_ARGS__) fn(DT_N_S_soc_S_counter_3ff5f000, __VA_ARGS__) fn(DT_N_S_soc_S_counter_3ff5f024, __VA_ARGS__) fn(DT_N_S_soc_S_counter_3ff60000, __VA_ARGS__) fn(DT_N_S_soc_S_counter_3ff60024, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_memory_3ffb0000) fn(DT_N_S_soc_S_interrupt_controller_3ff00104) fn(DT_N_S_soc_S_rtc_3ff48000) fn(DT_N_S_soc_S_flash_controller_3ff42000) fn(DT_N_S_soc_S_ipi_3f4c0058) fn(DT_N_S_soc_S_ipi_3f4c005c) fn(DT_N_S_soc_S_uart_3ff40000) fn(DT_N_S_soc_S_pinmux_3ff49000) fn(DT_N_S_soc_S_gpio_3ff44000) fn(DT_N_S_soc_S_gpio_3ff44800) fn(DT_N_S_soc_S_i2c_3ff53000) fn(DT_N_S_soc_S_trng_3ff75144) fn(DT_N_S_soc_S_watchdog_3ff5f048) fn(DT_N_S_soc_S_spi_3ff64000) fn(DT_N_S_soc_S_spi_3ff65000) fn(DT_N_S_soc_S_counter_3ff5f000) fn(DT_N_S_soc_S_counter_3ff5f024) fn(DT_N_S_soc_S_counter_3ff60000) fn(DT_N_S_soc_S_counter_3ff60024) 
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_3ffb0000, __VA_ARGS__) fn(DT_N_S_soc_S_interrupt_controller_3ff00104, __VA_ARGS__) fn(DT_N_S_soc_S_rtc_3ff48000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000, __VA_ARGS__) fn(DT_N_S_soc_S_ipi_3f4c0058, __VA_ARGS__) fn(DT_N_S_soc_S_ipi_3f4c005c, __VA_ARGS__) fn(DT_N_S_soc_S_uart_3ff40000, __VA_ARGS__) fn(DT_N_S_soc_S_pinmux_3ff49000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_3ff44000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_3ff44800, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_3ff53000, __VA_ARGS__) fn(DT_N_S_soc_S_trng_3ff75144, __VA_ARGS__) fn(DT_N_S_soc_S_watchdog_3ff5f048, __VA_ARGS__) fn(DT_N_S_soc_S_spi_3ff64000, __VA_ARGS__) fn(DT_N_S_soc_S_spi_3ff65000, __VA_ARGS__) fn(DT_N_S_soc_S_counter_3ff5f000, __VA_ARGS__) fn(DT_N_S_soc_S_counter_3ff5f024, __VA_ARGS__) fn(DT_N_S_soc_S_counter_3ff60000, __VA_ARGS__) fn(DT_N_S_soc_S_counter_3ff60024, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_ORD 8

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_SUPPORTS_ORDS \
	9, /* /soc/interrupt-controller@3ff00104 */ \
	10, /* /soc/gpio@3ff44000 */ \
	15, /* /soc/counter@3ff5f000 */ \
	16, /* /soc/counter@3ff5f024 */ \
	17, /* /soc/counter@3ff60000 */ \
	18, /* /soc/counter@3ff60024 */ \
	19, /* /soc/gpio@3ff44800 */ \
	20, /* /soc/rtc@3ff48000 */ \
	21, /* /soc/i2c@3ff53000 */ \
	22, /* /soc/i2c@3ff67000 */ \
	23, /* /soc/ipi@3f4c0058 */ \
	24, /* /soc/ipi@3f4c005c */ \
	25, /* /soc/ledc@3ff59000 */ \
	26, /* /soc/memory@3ffb0000 */ \
	27, /* /soc/pinmux@3ff49000 */ \
	28, /* /soc/spi@3ff64000 */ \
	29, /* /soc/trng@3ff75144 */ \
	30, /* /soc/uart@3ff40000 */ \
	31, /* /soc/uart@3ff50000 */ \
	32, /* /soc/uart@3ff6e000 */ \
	33, /* /soc/watchdog@3ff5f048 */ \
	34, /* /soc/watchdog@3ff60048 */ \
	35, /* /soc/flash-controller@3ff42000 */ \
	43, /* /soc/spi@3ff65000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_EXISTS 1
#define DT_N_INST_0_simple_bus DT_N_S_soc

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_REG_NUM 0
#define DT_N_S_soc_RANGES_NUM 0
#define DT_N_S_soc_FOREACH_RANGE(fn) 
#define DT_N_S_soc_IRQ_NUM 0
#define DT_N_S_soc_COMPAT_MATCHES_simple_bus 1
#define DT_N_S_soc_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_P_compatible {"simple-bus"}
#define DT_N_S_soc_P_compatible_IDX_0 "simple-bus"
#define DT_N_S_soc_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc, compatible, 0)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_LEN 1
#define DT_N_S_soc_P_compatible_EXISTS 1

/*
 * Devicetree node: /soc/interrupt-controller@3ff00104
 *
 * Node identifier: DT_N_S_soc_S_interrupt_controller_3ff00104
 *
 * Binding (compatible = espressif,esp32-intc):
 *   $ZEPHYR_BASE/dts/bindings/interrupt-controller/espressif,esp32-intc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_interrupt_controller_3ff00104_PATH "/soc/interrupt-controller@3ff00104"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_interrupt_controller_3ff00104_FULL_NAME "interrupt-controller@3ff00104"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_interrupt_controller_3ff00104_PARENT DT_N_S_soc
#define DT_N_S_soc_S_interrupt_controller_3ff00104_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_interrupt_controller_3ff00104_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_interrupt_controller_3ff00104_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_interrupt_controller_3ff00104_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_interrupt_controller_3ff00104_ORD 9

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_interrupt_controller_3ff00104_REQUIRES_ORDS \
	8, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_interrupt_controller_3ff00104_SUPPORTS_ORDS \
	10, /* /soc/gpio@3ff44000 */ \
	15, /* /soc/counter@3ff5f000 */ \
	16, /* /soc/counter@3ff5f024 */ \
	17, /* /soc/counter@3ff60000 */ \
	18, /* /soc/counter@3ff60024 */ \
	19, /* /soc/gpio@3ff44800 */ \
	21, /* /soc/i2c@3ff53000 */ \
	22, /* /soc/i2c@3ff67000 */ \
	23, /* /soc/ipi@3f4c0058 */ \
	24, /* /soc/ipi@3f4c005c */ \
	28, /* /soc/spi@3ff64000 */ \
	30, /* /soc/uart@3ff40000 */ \
	31, /* /soc/uart@3ff50000 */ \
	32, /* /soc/uart@3ff6e000 */ \
	33, /* /soc/watchdog@3ff5f048 */ \
	34, /* /soc/watchdog@3ff60048 */ \
	43, /* /soc/spi@3ff65000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_interrupt_controller_3ff00104_EXISTS 1
#define DT_N_INST_0_espressif_esp32_intc DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_NODELABEL_intc              DT_N_S_soc_S_interrupt_controller_3ff00104

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_interrupt_controller_3ff00104_REG_NUM 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_REG_IDX_0_VAL_ADDRESS 1072693508 /* 0x3ff00104 */
#define DT_N_S_soc_S_interrupt_controller_3ff00104_REG_IDX_0_VAL_SIZE 276 /* 0x114 */
#define DT_N_S_soc_S_interrupt_controller_3ff00104_RANGES_NUM 0
#define DT_N_S_soc_S_interrupt_controller_3ff00104_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_interrupt_controller_3ff00104_IRQ_NUM 0
#define DT_N_S_soc_S_interrupt_controller_3ff00104_COMPAT_MATCHES_espressif_esp32_intc 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_interrupt_controller_3ff00104_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_reg {1072693508 /* 0x3ff00104 */, 276 /* 0x114 */}
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_reg_IDX_0 1072693508
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_reg_IDX_1 276
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_3ff00104, reg, 0) \
	fn(DT_N_S_soc_S_interrupt_controller_3ff00104, reg, 1)
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_3ff00104, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_3ff00104, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_reg_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_interrupt_controller 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_interrupt_controller_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_status "okay"
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_3ff00104, status, 0) \
	fn(DT_N_S_soc_S_interrupt_controller_3ff00104, status, 1) \
	fn(DT_N_S_soc_S_interrupt_controller_3ff00104, status, 2) \
	fn(DT_N_S_soc_S_interrupt_controller_3ff00104, status, 3)
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_3ff00104, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_3ff00104, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_3ff00104, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_3ff00104, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_status_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_compatible {"espressif,esp32-intc"}
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_compatible_IDX_0 "espressif,esp32-intc"
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_3ff00104, compatible, 0)
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_3ff00104, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_compatible_LEN 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_compatible_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_label "INTC_0"
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_label_STRING_TOKEN INTC_0
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_label_STRING_UPPER_TOKEN INTC_0
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_3ff00104, label, 0) \
	fn(DT_N_S_soc_S_interrupt_controller_3ff00104, label, 1) \
	fn(DT_N_S_soc_S_interrupt_controller_3ff00104, label, 2) \
	fn(DT_N_S_soc_S_interrupt_controller_3ff00104, label, 3) \
	fn(DT_N_S_soc_S_interrupt_controller_3ff00104, label, 4) \
	fn(DT_N_S_soc_S_interrupt_controller_3ff00104, label, 5)
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_3ff00104, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_3ff00104, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_3ff00104, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_3ff00104, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_3ff00104, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_3ff00104, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_label_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_wakeup_source 0
#define DT_N_S_soc_S_interrupt_controller_3ff00104_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpio@3ff44000
 *
 * Node identifier: DT_N_S_soc_S_gpio_3ff44000
 *
 * Binding (compatible = espressif,esp32-gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/espressif,esp32-gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_3ff44000_PATH "/soc/gpio@3ff44000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_3ff44000_FULL_NAME "gpio@3ff44000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_3ff44000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_gpio_3ff44000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_3ff44000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_3ff44000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_3ff44000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_3ff44000_ORD 10

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_3ff44000_REQUIRES_ORDS \
	8, /* /soc */ \
	9, /* /soc/interrupt-controller@3ff00104 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_3ff44000_SUPPORTS_ORDS \
	11, /* /leds/led_0 */ \
	12, /* /leds/led_1 */ \
	13, /* /leds/led_2 */ \
	14, /* /leds/ledgp1 */ \
	44, /* /soc/spi@3ff65000/ili9341@0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_3ff44000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_gpio DT_N_S_soc_S_gpio_3ff44000
#define DT_N_NODELABEL_gpio0             DT_N_S_soc_S_gpio_3ff44000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_3ff44000_REG_NUM 1
#define DT_N_S_soc_S_gpio_3ff44000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44000_REG_IDX_0_VAL_ADDRESS 1072971776 /* 0x3ff44000 */
#define DT_N_S_soc_S_gpio_3ff44000_REG_IDX_0_VAL_SIZE 2048 /* 0x800 */
#define DT_N_S_soc_S_gpio_3ff44000_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_3ff44000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_3ff44000_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_3ff44000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44000_IRQ_IDX_0_VAL_irq 22
#define DT_N_S_soc_S_gpio_3ff44000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44000_COMPAT_MATCHES_espressif_esp32_gpio 1
#define DT_N_S_soc_S_gpio_3ff44000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_3ff44000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_3ff44000_P_reg {1072971776 /* 0x3ff44000 */, 2048 /* 0x800 */}
#define DT_N_S_soc_S_gpio_3ff44000_P_reg_IDX_0 1072971776
#define DT_N_S_soc_S_gpio_3ff44000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44000_P_reg_IDX_1 2048
#define DT_N_S_soc_S_gpio_3ff44000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_3ff44000, reg, 0) \
	fn(DT_N_S_soc_S_gpio_3ff44000, reg, 1)
#define DT_N_S_soc_S_gpio_3ff44000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_3ff44000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_3ff44000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_3ff44000_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44000_P_label "GPIO_0"
#define DT_N_S_soc_S_gpio_3ff44000_P_label_STRING_TOKEN GPIO_0
#define DT_N_S_soc_S_gpio_3ff44000_P_label_STRING_UPPER_TOKEN GPIO_0
#define DT_N_S_soc_S_gpio_3ff44000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_3ff44000, label, 0) \
	fn(DT_N_S_soc_S_gpio_3ff44000, label, 1) \
	fn(DT_N_S_soc_S_gpio_3ff44000, label, 2) \
	fn(DT_N_S_soc_S_gpio_3ff44000, label, 3) \
	fn(DT_N_S_soc_S_gpio_3ff44000, label, 4) \
	fn(DT_N_S_soc_S_gpio_3ff44000, label, 5)
#define DT_N_S_soc_S_gpio_3ff44000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_3ff44000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_3ff44000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_3ff44000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_3ff44000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_3ff44000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_3ff44000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_3ff44000_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44000_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_3ff44000_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44000_P_ngpios 32
#define DT_N_S_soc_S_gpio_3ff44000_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44000_P_status "okay"
#define DT_N_S_soc_S_gpio_3ff44000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_3ff44000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_3ff44000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_3ff44000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_3ff44000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_3ff44000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_3ff44000, status, 0) \
	fn(DT_N_S_soc_S_gpio_3ff44000, status, 1) \
	fn(DT_N_S_soc_S_gpio_3ff44000, status, 2) \
	fn(DT_N_S_soc_S_gpio_3ff44000, status, 3)
#define DT_N_S_soc_S_gpio_3ff44000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_3ff44000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_3ff44000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_3ff44000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_3ff44000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_3ff44000_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44000_P_compatible {"espressif,esp32-gpio"}
#define DT_N_S_soc_S_gpio_3ff44000_P_compatible_IDX_0 "espressif,esp32-gpio"
#define DT_N_S_soc_S_gpio_3ff44000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_3ff44000, compatible, 0)
#define DT_N_S_soc_S_gpio_3ff44000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_3ff44000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_3ff44000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_3ff44000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44000_P_interrupts {22 /* 0x16 */}
#define DT_N_S_soc_S_gpio_3ff44000_P_interrupts_IDX_0 22
#define DT_N_S_soc_S_gpio_3ff44000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_3ff44000, interrupts, 0)
#define DT_N_S_soc_S_gpio_3ff44000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_3ff44000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_3ff44000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_gpio_3ff44000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_gpio_3ff44000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_gpio_3ff44000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_gpio_3ff44000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44000_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_3ff44000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /leds/led_0
 *
 * Node identifier: DT_N_S_leds_S_led_0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_S_led_0_PATH "/leds/led_0"

/* Node's name with unit-address: */
#define DT_N_S_leds_S_led_0_FULL_NAME "led_0"

/* Node parent (/leds) identifier: */
#define DT_N_S_leds_S_led_0_PARENT DT_N_S_leds
#define DT_N_S_leds_S_led_0_FOREACH_CHILD(fn) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_leds_S_led_0_ORD 11

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_S_led_0_REQUIRES_ORDS \
	7, /* /leds */ \
	10, /* /soc/gpio@3ff44000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_S_led_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_leds_S_led_0_EXISTS 1
#define DT_N_ALIAS_led0         DT_N_S_leds_S_led_0
#define DT_N_NODELABEL_blue_led DT_N_S_leds_S_led_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_S_led_0_REG_NUM 0
#define DT_N_S_leds_S_led_0_RANGES_NUM 0
#define DT_N_S_leds_S_led_0_FOREACH_RANGE(fn) 
#define DT_N_S_leds_S_led_0_IRQ_NUM 0
#define DT_N_S_leds_S_led_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_S_led_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_PH DT_N_S_soc_S_gpio_3ff44000
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_pin 4
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_flags 0
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_0, gpios, 0)
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_0_P_gpios_LEN 1
#define DT_N_S_leds_S_led_0_P_gpios_EXISTS 1
#define DT_N_S_leds_S_led_0_P_label "Blue - LED0"
#define DT_N_S_leds_S_led_0_P_label_STRING_TOKEN Blue___LED0
#define DT_N_S_leds_S_led_0_P_label_STRING_UPPER_TOKEN BLUE___LED0
#define DT_N_S_leds_S_led_0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_0, label, 0) \
	fn(DT_N_S_leds_S_led_0, label, 1) \
	fn(DT_N_S_leds_S_led_0, label, 2) \
	fn(DT_N_S_leds_S_led_0, label, 3) \
	fn(DT_N_S_leds_S_led_0, label, 4) \
	fn(DT_N_S_leds_S_led_0, label, 5) \
	fn(DT_N_S_leds_S_led_0, label, 6) \
	fn(DT_N_S_leds_S_led_0, label, 7) \
	fn(DT_N_S_leds_S_led_0, label, 8) \
	fn(DT_N_S_leds_S_led_0, label, 9) \
	fn(DT_N_S_leds_S_led_0, label, 10)
#define DT_N_S_leds_S_led_0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, label, 0, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_0, label, 1, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_0, label, 2, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_0, label, 3, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_0, label, 4, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_0, label, 5, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_0, label, 6, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_0, label, 7, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_0, label, 8, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_0, label, 9, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_0, label, 10, __VA_ARGS__)
#define DT_N_S_leds_S_led_0_P_label_EXISTS 1

/*
 * Devicetree node: /leds/led_1
 *
 * Node identifier: DT_N_S_leds_S_led_1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_S_led_1_PATH "/leds/led_1"

/* Node's name with unit-address: */
#define DT_N_S_leds_S_led_1_FULL_NAME "led_1"

/* Node parent (/leds) identifier: */
#define DT_N_S_leds_S_led_1_PARENT DT_N_S_leds
#define DT_N_S_leds_S_led_1_FOREACH_CHILD(fn) 
#define DT_N_S_leds_S_led_1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_leds_S_led_1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_leds_S_led_1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_leds_S_led_1_ORD 12

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_S_led_1_REQUIRES_ORDS \
	7, /* /leds */ \
	10, /* /soc/gpio@3ff44000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_S_led_1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_leds_S_led_1_EXISTS 1
#define DT_N_ALIAS_led1          DT_N_S_leds_S_led_1
#define DT_N_NODELABEL_green_led DT_N_S_leds_S_led_1

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_S_led_1_REG_NUM 0
#define DT_N_S_leds_S_led_1_RANGES_NUM 0
#define DT_N_S_leds_S_led_1_FOREACH_RANGE(fn) 
#define DT_N_S_leds_S_led_1_IRQ_NUM 0
#define DT_N_S_leds_S_led_1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_S_led_1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_leds_S_led_1_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_leds_S_led_1_P_gpios_IDX_0_PH DT_N_S_soc_S_gpio_3ff44000
#define DT_N_S_leds_S_led_1_P_gpios_IDX_0_VAL_pin 2
#define DT_N_S_leds_S_led_1_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_leds_S_led_1_P_gpios_IDX_0_VAL_flags 0
#define DT_N_S_leds_S_led_1_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_leds_S_led_1_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_1, gpios, 0)
#define DT_N_S_leds_S_led_1_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_1, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_1_P_gpios_LEN 1
#define DT_N_S_leds_S_led_1_P_gpios_EXISTS 1
#define DT_N_S_leds_S_led_1_P_label "Green - LED1"
#define DT_N_S_leds_S_led_1_P_label_STRING_TOKEN Green___LED1
#define DT_N_S_leds_S_led_1_P_label_STRING_UPPER_TOKEN GREEN___LED1
#define DT_N_S_leds_S_led_1_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_1, label, 0) \
	fn(DT_N_S_leds_S_led_1, label, 1) \
	fn(DT_N_S_leds_S_led_1, label, 2) \
	fn(DT_N_S_leds_S_led_1, label, 3) \
	fn(DT_N_S_leds_S_led_1, label, 4) \
	fn(DT_N_S_leds_S_led_1, label, 5) \
	fn(DT_N_S_leds_S_led_1, label, 6) \
	fn(DT_N_S_leds_S_led_1, label, 7) \
	fn(DT_N_S_leds_S_led_1, label, 8) \
	fn(DT_N_S_leds_S_led_1, label, 9) \
	fn(DT_N_S_leds_S_led_1, label, 10) \
	fn(DT_N_S_leds_S_led_1, label, 11)
#define DT_N_S_leds_S_led_1_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_1, label, 0, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_1, label, 1, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_1, label, 2, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_1, label, 3, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_1, label, 4, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_1, label, 5, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_1, label, 6, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_1, label, 7, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_1, label, 8, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_1, label, 9, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_1, label, 10, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_1, label, 11, __VA_ARGS__)
#define DT_N_S_leds_S_led_1_P_label_EXISTS 1

/*
 * Devicetree node: /leds/led_2
 *
 * Node identifier: DT_N_S_leds_S_led_2
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_S_led_2_PATH "/leds/led_2"

/* Node's name with unit-address: */
#define DT_N_S_leds_S_led_2_FULL_NAME "led_2"

/* Node parent (/leds) identifier: */
#define DT_N_S_leds_S_led_2_PARENT DT_N_S_leds
#define DT_N_S_leds_S_led_2_FOREACH_CHILD(fn) 
#define DT_N_S_leds_S_led_2_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_leds_S_led_2_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_leds_S_led_2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_leds_S_led_2_ORD 13

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_S_led_2_REQUIRES_ORDS \
	7, /* /leds */ \
	10, /* /soc/gpio@3ff44000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_S_led_2_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_leds_S_led_2_EXISTS 1
#define DT_N_ALIAS_led2        DT_N_S_leds_S_led_2
#define DT_N_NODELABEL_red_led DT_N_S_leds_S_led_2

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_S_led_2_REG_NUM 0
#define DT_N_S_leds_S_led_2_RANGES_NUM 0
#define DT_N_S_leds_S_led_2_FOREACH_RANGE(fn) 
#define DT_N_S_leds_S_led_2_IRQ_NUM 0
#define DT_N_S_leds_S_led_2_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_S_led_2_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_leds_S_led_2_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_leds_S_led_2_P_gpios_IDX_0_PH DT_N_S_soc_S_gpio_3ff44000
#define DT_N_S_leds_S_led_2_P_gpios_IDX_0_VAL_pin 0
#define DT_N_S_leds_S_led_2_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_leds_S_led_2_P_gpios_IDX_0_VAL_flags 0
#define DT_N_S_leds_S_led_2_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_leds_S_led_2_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_2, gpios, 0)
#define DT_N_S_leds_S_led_2_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_2, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_2_P_gpios_LEN 1
#define DT_N_S_leds_S_led_2_P_gpios_EXISTS 1
#define DT_N_S_leds_S_led_2_P_label "Red - LED2"
#define DT_N_S_leds_S_led_2_P_label_STRING_TOKEN Red___LED2
#define DT_N_S_leds_S_led_2_P_label_STRING_UPPER_TOKEN RED___LED2
#define DT_N_S_leds_S_led_2_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_2, label, 0) \
	fn(DT_N_S_leds_S_led_2, label, 1) \
	fn(DT_N_S_leds_S_led_2, label, 2) \
	fn(DT_N_S_leds_S_led_2, label, 3) \
	fn(DT_N_S_leds_S_led_2, label, 4) \
	fn(DT_N_S_leds_S_led_2, label, 5) \
	fn(DT_N_S_leds_S_led_2, label, 6) \
	fn(DT_N_S_leds_S_led_2, label, 7) \
	fn(DT_N_S_leds_S_led_2, label, 8) \
	fn(DT_N_S_leds_S_led_2, label, 9)
#define DT_N_S_leds_S_led_2_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_2, label, 0, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_2, label, 1, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_2, label, 2, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_2, label, 3, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_2, label, 4, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_2, label, 5, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_2, label, 6, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_2, label, 7, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_2, label, 8, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_2, label, 9, __VA_ARGS__)
#define DT_N_S_leds_S_led_2_P_label_EXISTS 1

/*
 * Devicetree node: /leds/ledgp1
 *
 * Node identifier: DT_N_S_leds_S_ledgp1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_S_ledgp1_PATH "/leds/ledgp1"

/* Node's name with unit-address: */
#define DT_N_S_leds_S_ledgp1_FULL_NAME "ledgp1"

/* Node parent (/leds) identifier: */
#define DT_N_S_leds_S_ledgp1_PARENT DT_N_S_leds
#define DT_N_S_leds_S_ledgp1_FOREACH_CHILD(fn) 
#define DT_N_S_leds_S_ledgp1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_leds_S_ledgp1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_leds_S_ledgp1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_leds_S_ledgp1_ORD 14

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_S_ledgp1_REQUIRES_ORDS \
	7, /* /leds */ \
	10, /* /soc/gpio@3ff44000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_S_ledgp1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_leds_S_ledgp1_EXISTS 1
#define DT_N_ALIAS_ledgp1       DT_N_S_leds_S_ledgp1
#define DT_N_NODELABEL_gp_led_1 DT_N_S_leds_S_ledgp1

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_S_ledgp1_REG_NUM 0
#define DT_N_S_leds_S_ledgp1_RANGES_NUM 0
#define DT_N_S_leds_S_ledgp1_FOREACH_RANGE(fn) 
#define DT_N_S_leds_S_ledgp1_IRQ_NUM 0
#define DT_N_S_leds_S_ledgp1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_S_ledgp1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_leds_S_ledgp1_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_leds_S_ledgp1_P_gpios_IDX_0_PH DT_N_S_soc_S_gpio_3ff44000
#define DT_N_S_leds_S_ledgp1_P_gpios_IDX_0_VAL_pin 22
#define DT_N_S_leds_S_ledgp1_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_leds_S_ledgp1_P_gpios_IDX_0_VAL_flags 0
#define DT_N_S_leds_S_ledgp1_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_leds_S_ledgp1_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_ledgp1, gpios, 0)
#define DT_N_S_leds_S_ledgp1_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_ledgp1, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_ledgp1_P_gpios_LEN 1
#define DT_N_S_leds_S_ledgp1_P_gpios_EXISTS 1
#define DT_N_S_leds_S_ledgp1_P_label "Green - LED1"
#define DT_N_S_leds_S_ledgp1_P_label_STRING_TOKEN Green___LED1
#define DT_N_S_leds_S_ledgp1_P_label_STRING_UPPER_TOKEN GREEN___LED1
#define DT_N_S_leds_S_ledgp1_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_ledgp1, label, 0) \
	fn(DT_N_S_leds_S_ledgp1, label, 1) \
	fn(DT_N_S_leds_S_ledgp1, label, 2) \
	fn(DT_N_S_leds_S_ledgp1, label, 3) \
	fn(DT_N_S_leds_S_ledgp1, label, 4) \
	fn(DT_N_S_leds_S_ledgp1, label, 5) \
	fn(DT_N_S_leds_S_ledgp1, label, 6) \
	fn(DT_N_S_leds_S_ledgp1, label, 7) \
	fn(DT_N_S_leds_S_ledgp1, label, 8) \
	fn(DT_N_S_leds_S_ledgp1, label, 9) \
	fn(DT_N_S_leds_S_ledgp1, label, 10) \
	fn(DT_N_S_leds_S_ledgp1, label, 11)
#define DT_N_S_leds_S_ledgp1_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_ledgp1, label, 0, __VA_ARGS__) \
	fn(DT_N_S_leds_S_ledgp1, label, 1, __VA_ARGS__) \
	fn(DT_N_S_leds_S_ledgp1, label, 2, __VA_ARGS__) \
	fn(DT_N_S_leds_S_ledgp1, label, 3, __VA_ARGS__) \
	fn(DT_N_S_leds_S_ledgp1, label, 4, __VA_ARGS__) \
	fn(DT_N_S_leds_S_ledgp1, label, 5, __VA_ARGS__) \
	fn(DT_N_S_leds_S_ledgp1, label, 6, __VA_ARGS__) \
	fn(DT_N_S_leds_S_ledgp1, label, 7, __VA_ARGS__) \
	fn(DT_N_S_leds_S_ledgp1, label, 8, __VA_ARGS__) \
	fn(DT_N_S_leds_S_ledgp1, label, 9, __VA_ARGS__) \
	fn(DT_N_S_leds_S_ledgp1, label, 10, __VA_ARGS__) \
	fn(DT_N_S_leds_S_ledgp1, label, 11, __VA_ARGS__)
#define DT_N_S_leds_S_ledgp1_P_label_EXISTS 1

/*
 * Devicetree node: /soc/counter@3ff5f000
 *
 * Node identifier: DT_N_S_soc_S_counter_3ff5f000
 */

/* Node's full path: */
#define DT_N_S_soc_S_counter_3ff5f000_PATH "/soc/counter@3ff5f000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_counter_3ff5f000_FULL_NAME "counter@3ff5f000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_counter_3ff5f000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_counter_3ff5f000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_counter_3ff5f000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_counter_3ff5f000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_counter_3ff5f000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_counter_3ff5f000_ORD 15

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_counter_3ff5f000_REQUIRES_ORDS \
	8, /* /soc */ \
	9, /* /soc/interrupt-controller@3ff00104 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_counter_3ff5f000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_counter_3ff5f000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_timer DT_N_S_soc_S_counter_3ff5f000
#define DT_N_NODELABEL_timer0             DT_N_S_soc_S_counter_3ff5f000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_counter_3ff5f000_REG_NUM 1
#define DT_N_S_soc_S_counter_3ff5f000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_REG_IDX_0_VAL_ADDRESS 1073082368 /* 0x3ff5f000 */
#define DT_N_S_soc_S_counter_3ff5f000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_counter_3ff5f000_RANGES_NUM 0
#define DT_N_S_soc_S_counter_3ff5f000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_counter_3ff5f000_IRQ_NUM 1
#define DT_N_S_soc_S_counter_3ff5f000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_IRQ_IDX_0_VAL_irq 14
#define DT_N_S_soc_S_counter_3ff5f000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_COMPAT_MATCHES_espressif_esp32_timer 1
#define DT_N_S_soc_S_counter_3ff5f000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_counter_3ff5f000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_counter_3ff5f000_P_compatible {"espressif,esp32-timer"}
#define DT_N_S_soc_S_counter_3ff5f000_P_compatible_IDX_0 "espressif,esp32-timer"
#define DT_N_S_soc_S_counter_3ff5f000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff5f000, compatible, 0)
#define DT_N_S_soc_S_counter_3ff5f000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff5f000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff5f000_P_compatible_LEN 1
#define DT_N_S_soc_S_counter_3ff5f000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_reg {1073082368 /* 0x3ff5f000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_counter_3ff5f000_P_reg_IDX_0 1073082368
#define DT_N_S_soc_S_counter_3ff5f000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_counter_3ff5f000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff5f000, reg, 0) \
	fn(DT_N_S_soc_S_counter_3ff5f000, reg, 1)
#define DT_N_S_soc_S_counter_3ff5f000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff5f000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff5f000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff5f000_P_reg_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_interrupts {14 /* 0xe */}
#define DT_N_S_soc_S_counter_3ff5f000_P_interrupts_IDX_0 14
#define DT_N_S_soc_S_counter_3ff5f000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff5f000, interrupts, 0)
#define DT_N_S_soc_S_counter_3ff5f000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff5f000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff5f000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_label "TIMG0_T0"
#define DT_N_S_soc_S_counter_3ff5f000_P_label_STRING_TOKEN TIMG0_T0
#define DT_N_S_soc_S_counter_3ff5f000_P_label_STRING_UPPER_TOKEN TIMG0_T0
#define DT_N_S_soc_S_counter_3ff5f000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff5f000, label, 0) \
	fn(DT_N_S_soc_S_counter_3ff5f000, label, 1) \
	fn(DT_N_S_soc_S_counter_3ff5f000, label, 2) \
	fn(DT_N_S_soc_S_counter_3ff5f000, label, 3) \
	fn(DT_N_S_soc_S_counter_3ff5f000, label, 4) \
	fn(DT_N_S_soc_S_counter_3ff5f000, label, 5) \
	fn(DT_N_S_soc_S_counter_3ff5f000, label, 6) \
	fn(DT_N_S_soc_S_counter_3ff5f000, label, 7)
#define DT_N_S_soc_S_counter_3ff5f000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff5f000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff5f000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff5f000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff5f000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff5f000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff5f000, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff5f000, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff5f000, label, 7, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff5f000_P_label_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_status "okay"
#define DT_N_S_soc_S_counter_3ff5f000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_counter_3ff5f000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_counter_3ff5f000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_counter_3ff5f000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_counter_3ff5f000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_counter_3ff5f000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff5f000, status, 0) \
	fn(DT_N_S_soc_S_counter_3ff5f000, status, 1) \
	fn(DT_N_S_soc_S_counter_3ff5f000, status, 2) \
	fn(DT_N_S_soc_S_counter_3ff5f000, status, 3)
#define DT_N_S_soc_S_counter_3ff5f000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff5f000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff5f000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff5f000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff5f000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff5f000_P_status_EXISTS 1

/*
 * Devicetree node: /soc/counter@3ff5f024
 *
 * Node identifier: DT_N_S_soc_S_counter_3ff5f024
 */

/* Node's full path: */
#define DT_N_S_soc_S_counter_3ff5f024_PATH "/soc/counter@3ff5f024"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_counter_3ff5f024_FULL_NAME "counter@3ff5f024"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_counter_3ff5f024_PARENT DT_N_S_soc
#define DT_N_S_soc_S_counter_3ff5f024_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_counter_3ff5f024_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_counter_3ff5f024_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_counter_3ff5f024_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_counter_3ff5f024_ORD 16

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_counter_3ff5f024_REQUIRES_ORDS \
	8, /* /soc */ \
	9, /* /soc/interrupt-controller@3ff00104 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_counter_3ff5f024_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_counter_3ff5f024_EXISTS 1
#define DT_N_INST_1_espressif_esp32_timer DT_N_S_soc_S_counter_3ff5f024
#define DT_N_NODELABEL_timer1             DT_N_S_soc_S_counter_3ff5f024

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_counter_3ff5f024_REG_NUM 1
#define DT_N_S_soc_S_counter_3ff5f024_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_REG_IDX_0_VAL_ADDRESS 1073082404 /* 0x3ff5f024 */
#define DT_N_S_soc_S_counter_3ff5f024_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_counter_3ff5f024_RANGES_NUM 0
#define DT_N_S_soc_S_counter_3ff5f024_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_counter_3ff5f024_IRQ_NUM 1
#define DT_N_S_soc_S_counter_3ff5f024_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_IRQ_IDX_0_VAL_irq 15
#define DT_N_S_soc_S_counter_3ff5f024_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_COMPAT_MATCHES_espressif_esp32_timer 1
#define DT_N_S_soc_S_counter_3ff5f024_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_counter_3ff5f024_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_counter_3ff5f024_P_compatible {"espressif,esp32-timer"}
#define DT_N_S_soc_S_counter_3ff5f024_P_compatible_IDX_0 "espressif,esp32-timer"
#define DT_N_S_soc_S_counter_3ff5f024_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff5f024, compatible, 0)
#define DT_N_S_soc_S_counter_3ff5f024_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff5f024, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff5f024_P_compatible_LEN 1
#define DT_N_S_soc_S_counter_3ff5f024_P_compatible_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_reg {1073082404 /* 0x3ff5f024 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_counter_3ff5f024_P_reg_IDX_0 1073082404
#define DT_N_S_soc_S_counter_3ff5f024_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_reg_IDX_1 4096
#define DT_N_S_soc_S_counter_3ff5f024_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff5f024, reg, 0) \
	fn(DT_N_S_soc_S_counter_3ff5f024, reg, 1)
#define DT_N_S_soc_S_counter_3ff5f024_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff5f024, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff5f024, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff5f024_P_reg_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_interrupts {15 /* 0xf */}
#define DT_N_S_soc_S_counter_3ff5f024_P_interrupts_IDX_0 15
#define DT_N_S_soc_S_counter_3ff5f024_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff5f024, interrupts, 0)
#define DT_N_S_soc_S_counter_3ff5f024_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff5f024, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff5f024_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_label "TIMG0_T1"
#define DT_N_S_soc_S_counter_3ff5f024_P_label_STRING_TOKEN TIMG0_T1
#define DT_N_S_soc_S_counter_3ff5f024_P_label_STRING_UPPER_TOKEN TIMG0_T1
#define DT_N_S_soc_S_counter_3ff5f024_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff5f024, label, 0) \
	fn(DT_N_S_soc_S_counter_3ff5f024, label, 1) \
	fn(DT_N_S_soc_S_counter_3ff5f024, label, 2) \
	fn(DT_N_S_soc_S_counter_3ff5f024, label, 3) \
	fn(DT_N_S_soc_S_counter_3ff5f024, label, 4) \
	fn(DT_N_S_soc_S_counter_3ff5f024, label, 5) \
	fn(DT_N_S_soc_S_counter_3ff5f024, label, 6) \
	fn(DT_N_S_soc_S_counter_3ff5f024, label, 7)
#define DT_N_S_soc_S_counter_3ff5f024_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff5f024, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff5f024, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff5f024, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff5f024, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff5f024, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff5f024, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff5f024, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff5f024, label, 7, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff5f024_P_label_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_status "okay"
#define DT_N_S_soc_S_counter_3ff5f024_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_counter_3ff5f024_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_counter_3ff5f024_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_counter_3ff5f024_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_counter_3ff5f024_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_counter_3ff5f024_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff5f024, status, 0) \
	fn(DT_N_S_soc_S_counter_3ff5f024, status, 1) \
	fn(DT_N_S_soc_S_counter_3ff5f024, status, 2) \
	fn(DT_N_S_soc_S_counter_3ff5f024, status, 3)
#define DT_N_S_soc_S_counter_3ff5f024_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff5f024, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff5f024, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff5f024, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff5f024, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff5f024_P_status_EXISTS 1

/*
 * Devicetree node: /soc/counter@3ff60000
 *
 * Node identifier: DT_N_S_soc_S_counter_3ff60000
 */

/* Node's full path: */
#define DT_N_S_soc_S_counter_3ff60000_PATH "/soc/counter@3ff60000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_counter_3ff60000_FULL_NAME "counter@3ff60000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_counter_3ff60000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_counter_3ff60000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_counter_3ff60000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_counter_3ff60000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_counter_3ff60000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_counter_3ff60000_ORD 17

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_counter_3ff60000_REQUIRES_ORDS \
	8, /* /soc */ \
	9, /* /soc/interrupt-controller@3ff00104 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_counter_3ff60000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_counter_3ff60000_EXISTS 1
#define DT_N_INST_2_espressif_esp32_timer DT_N_S_soc_S_counter_3ff60000
#define DT_N_NODELABEL_timer2             DT_N_S_soc_S_counter_3ff60000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_counter_3ff60000_REG_NUM 1
#define DT_N_S_soc_S_counter_3ff60000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_REG_IDX_0_VAL_ADDRESS 1073086464 /* 0x3ff60000 */
#define DT_N_S_soc_S_counter_3ff60000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_counter_3ff60000_RANGES_NUM 0
#define DT_N_S_soc_S_counter_3ff60000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_counter_3ff60000_IRQ_NUM 1
#define DT_N_S_soc_S_counter_3ff60000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_IRQ_IDX_0_VAL_irq 18
#define DT_N_S_soc_S_counter_3ff60000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_COMPAT_MATCHES_espressif_esp32_timer 1
#define DT_N_S_soc_S_counter_3ff60000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_counter_3ff60000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_counter_3ff60000_P_compatible {"espressif,esp32-timer"}
#define DT_N_S_soc_S_counter_3ff60000_P_compatible_IDX_0 "espressif,esp32-timer"
#define DT_N_S_soc_S_counter_3ff60000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff60000, compatible, 0)
#define DT_N_S_soc_S_counter_3ff60000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff60000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff60000_P_compatible_LEN 1
#define DT_N_S_soc_S_counter_3ff60000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_reg {1073086464 /* 0x3ff60000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_counter_3ff60000_P_reg_IDX_0 1073086464
#define DT_N_S_soc_S_counter_3ff60000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_counter_3ff60000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff60000, reg, 0) \
	fn(DT_N_S_soc_S_counter_3ff60000, reg, 1)
#define DT_N_S_soc_S_counter_3ff60000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff60000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff60000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff60000_P_reg_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_interrupts {18 /* 0x12 */}
#define DT_N_S_soc_S_counter_3ff60000_P_interrupts_IDX_0 18
#define DT_N_S_soc_S_counter_3ff60000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff60000, interrupts, 0)
#define DT_N_S_soc_S_counter_3ff60000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff60000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff60000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_label "TIMG1_T0"
#define DT_N_S_soc_S_counter_3ff60000_P_label_STRING_TOKEN TIMG1_T0
#define DT_N_S_soc_S_counter_3ff60000_P_label_STRING_UPPER_TOKEN TIMG1_T0
#define DT_N_S_soc_S_counter_3ff60000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff60000, label, 0) \
	fn(DT_N_S_soc_S_counter_3ff60000, label, 1) \
	fn(DT_N_S_soc_S_counter_3ff60000, label, 2) \
	fn(DT_N_S_soc_S_counter_3ff60000, label, 3) \
	fn(DT_N_S_soc_S_counter_3ff60000, label, 4) \
	fn(DT_N_S_soc_S_counter_3ff60000, label, 5) \
	fn(DT_N_S_soc_S_counter_3ff60000, label, 6) \
	fn(DT_N_S_soc_S_counter_3ff60000, label, 7)
#define DT_N_S_soc_S_counter_3ff60000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff60000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff60000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff60000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff60000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff60000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff60000, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff60000, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff60000, label, 7, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff60000_P_label_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_status "okay"
#define DT_N_S_soc_S_counter_3ff60000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_counter_3ff60000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_counter_3ff60000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_counter_3ff60000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_counter_3ff60000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_counter_3ff60000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff60000, status, 0) \
	fn(DT_N_S_soc_S_counter_3ff60000, status, 1) \
	fn(DT_N_S_soc_S_counter_3ff60000, status, 2) \
	fn(DT_N_S_soc_S_counter_3ff60000, status, 3)
#define DT_N_S_soc_S_counter_3ff60000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff60000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff60000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff60000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff60000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff60000_P_status_EXISTS 1

/*
 * Devicetree node: /soc/counter@3ff60024
 *
 * Node identifier: DT_N_S_soc_S_counter_3ff60024
 */

/* Node's full path: */
#define DT_N_S_soc_S_counter_3ff60024_PATH "/soc/counter@3ff60024"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_counter_3ff60024_FULL_NAME "counter@3ff60024"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_counter_3ff60024_PARENT DT_N_S_soc
#define DT_N_S_soc_S_counter_3ff60024_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_counter_3ff60024_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_counter_3ff60024_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_counter_3ff60024_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_counter_3ff60024_ORD 18

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_counter_3ff60024_REQUIRES_ORDS \
	8, /* /soc */ \
	9, /* /soc/interrupt-controller@3ff00104 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_counter_3ff60024_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_counter_3ff60024_EXISTS 1
#define DT_N_INST_3_espressif_esp32_timer DT_N_S_soc_S_counter_3ff60024
#define DT_N_NODELABEL_timer3             DT_N_S_soc_S_counter_3ff60024

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_counter_3ff60024_REG_NUM 1
#define DT_N_S_soc_S_counter_3ff60024_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_REG_IDX_0_VAL_ADDRESS 1073086500 /* 0x3ff60024 */
#define DT_N_S_soc_S_counter_3ff60024_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_counter_3ff60024_RANGES_NUM 0
#define DT_N_S_soc_S_counter_3ff60024_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_counter_3ff60024_IRQ_NUM 1
#define DT_N_S_soc_S_counter_3ff60024_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_IRQ_IDX_0_VAL_irq 19
#define DT_N_S_soc_S_counter_3ff60024_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_COMPAT_MATCHES_espressif_esp32_timer 1
#define DT_N_S_soc_S_counter_3ff60024_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_counter_3ff60024_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_counter_3ff60024_P_compatible {"espressif,esp32-timer"}
#define DT_N_S_soc_S_counter_3ff60024_P_compatible_IDX_0 "espressif,esp32-timer"
#define DT_N_S_soc_S_counter_3ff60024_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff60024, compatible, 0)
#define DT_N_S_soc_S_counter_3ff60024_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff60024, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff60024_P_compatible_LEN 1
#define DT_N_S_soc_S_counter_3ff60024_P_compatible_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_reg {1073086500 /* 0x3ff60024 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_counter_3ff60024_P_reg_IDX_0 1073086500
#define DT_N_S_soc_S_counter_3ff60024_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_reg_IDX_1 4096
#define DT_N_S_soc_S_counter_3ff60024_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff60024, reg, 0) \
	fn(DT_N_S_soc_S_counter_3ff60024, reg, 1)
#define DT_N_S_soc_S_counter_3ff60024_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff60024, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff60024, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff60024_P_reg_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_interrupts {19 /* 0x13 */}
#define DT_N_S_soc_S_counter_3ff60024_P_interrupts_IDX_0 19
#define DT_N_S_soc_S_counter_3ff60024_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff60024, interrupts, 0)
#define DT_N_S_soc_S_counter_3ff60024_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff60024, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff60024_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_label "TIMG1_T1"
#define DT_N_S_soc_S_counter_3ff60024_P_label_STRING_TOKEN TIMG1_T1
#define DT_N_S_soc_S_counter_3ff60024_P_label_STRING_UPPER_TOKEN TIMG1_T1
#define DT_N_S_soc_S_counter_3ff60024_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff60024, label, 0) \
	fn(DT_N_S_soc_S_counter_3ff60024, label, 1) \
	fn(DT_N_S_soc_S_counter_3ff60024, label, 2) \
	fn(DT_N_S_soc_S_counter_3ff60024, label, 3) \
	fn(DT_N_S_soc_S_counter_3ff60024, label, 4) \
	fn(DT_N_S_soc_S_counter_3ff60024, label, 5) \
	fn(DT_N_S_soc_S_counter_3ff60024, label, 6) \
	fn(DT_N_S_soc_S_counter_3ff60024, label, 7)
#define DT_N_S_soc_S_counter_3ff60024_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff60024, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff60024, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff60024, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff60024, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff60024, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff60024, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff60024, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff60024, label, 7, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff60024_P_label_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_status "okay"
#define DT_N_S_soc_S_counter_3ff60024_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_counter_3ff60024_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_counter_3ff60024_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_counter_3ff60024_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_counter_3ff60024_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_counter_3ff60024_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff60024, status, 0) \
	fn(DT_N_S_soc_S_counter_3ff60024, status, 1) \
	fn(DT_N_S_soc_S_counter_3ff60024, status, 2) \
	fn(DT_N_S_soc_S_counter_3ff60024, status, 3)
#define DT_N_S_soc_S_counter_3ff60024_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_3ff60024, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff60024, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff60024, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_3ff60024, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_counter_3ff60024_P_status_EXISTS 1

/*
 * Devicetree node: /soc/gpio@3ff44800
 *
 * Node identifier: DT_N_S_soc_S_gpio_3ff44800
 *
 * Binding (compatible = espressif,esp32-gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/espressif,esp32-gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_3ff44800_PATH "/soc/gpio@3ff44800"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_3ff44800_FULL_NAME "gpio@3ff44800"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_3ff44800_PARENT DT_N_S_soc
#define DT_N_S_soc_S_gpio_3ff44800_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_3ff44800_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_3ff44800_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_3ff44800_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_3ff44800_ORD 19

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_3ff44800_REQUIRES_ORDS \
	8, /* /soc */ \
	9, /* /soc/interrupt-controller@3ff00104 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_3ff44800_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_3ff44800_EXISTS 1
#define DT_N_INST_1_espressif_esp32_gpio DT_N_S_soc_S_gpio_3ff44800
#define DT_N_NODELABEL_gpio1             DT_N_S_soc_S_gpio_3ff44800

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_3ff44800_REG_NUM 1
#define DT_N_S_soc_S_gpio_3ff44800_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44800_REG_IDX_0_VAL_ADDRESS 1072973824 /* 0x3ff44800 */
#define DT_N_S_soc_S_gpio_3ff44800_REG_IDX_0_VAL_SIZE 2048 /* 0x800 */
#define DT_N_S_soc_S_gpio_3ff44800_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_3ff44800_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_3ff44800_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_3ff44800_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44800_IRQ_IDX_0_VAL_irq 22
#define DT_N_S_soc_S_gpio_3ff44800_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44800_COMPAT_MATCHES_espressif_esp32_gpio 1
#define DT_N_S_soc_S_gpio_3ff44800_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_3ff44800_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_3ff44800_P_reg {1072973824 /* 0x3ff44800 */, 2048 /* 0x800 */}
#define DT_N_S_soc_S_gpio_3ff44800_P_reg_IDX_0 1072973824
#define DT_N_S_soc_S_gpio_3ff44800_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44800_P_reg_IDX_1 2048
#define DT_N_S_soc_S_gpio_3ff44800_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44800_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_3ff44800, reg, 0) \
	fn(DT_N_S_soc_S_gpio_3ff44800, reg, 1)
#define DT_N_S_soc_S_gpio_3ff44800_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_3ff44800, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_3ff44800, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_3ff44800_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44800_P_label "GPIO_1"
#define DT_N_S_soc_S_gpio_3ff44800_P_label_STRING_TOKEN GPIO_1
#define DT_N_S_soc_S_gpio_3ff44800_P_label_STRING_UPPER_TOKEN GPIO_1
#define DT_N_S_soc_S_gpio_3ff44800_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_3ff44800, label, 0) \
	fn(DT_N_S_soc_S_gpio_3ff44800, label, 1) \
	fn(DT_N_S_soc_S_gpio_3ff44800, label, 2) \
	fn(DT_N_S_soc_S_gpio_3ff44800, label, 3) \
	fn(DT_N_S_soc_S_gpio_3ff44800, label, 4) \
	fn(DT_N_S_soc_S_gpio_3ff44800, label, 5)
#define DT_N_S_soc_S_gpio_3ff44800_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_3ff44800, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_3ff44800, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_3ff44800, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_3ff44800, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_3ff44800, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_3ff44800, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_3ff44800_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44800_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_3ff44800_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44800_P_ngpios 8
#define DT_N_S_soc_S_gpio_3ff44800_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44800_P_status "okay"
#define DT_N_S_soc_S_gpio_3ff44800_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_3ff44800_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_3ff44800_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_3ff44800_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_3ff44800_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_3ff44800_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_3ff44800, status, 0) \
	fn(DT_N_S_soc_S_gpio_3ff44800, status, 1) \
	fn(DT_N_S_soc_S_gpio_3ff44800, status, 2) \
	fn(DT_N_S_soc_S_gpio_3ff44800, status, 3)
#define DT_N_S_soc_S_gpio_3ff44800_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_3ff44800, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_3ff44800, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_3ff44800, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_3ff44800, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_3ff44800_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44800_P_compatible {"espressif,esp32-gpio"}
#define DT_N_S_soc_S_gpio_3ff44800_P_compatible_IDX_0 "espressif,esp32-gpio"
#define DT_N_S_soc_S_gpio_3ff44800_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44800_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_3ff44800, compatible, 0)
#define DT_N_S_soc_S_gpio_3ff44800_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_3ff44800, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_3ff44800_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_3ff44800_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44800_P_interrupts {22 /* 0x16 */}
#define DT_N_S_soc_S_gpio_3ff44800_P_interrupts_IDX_0 22
#define DT_N_S_soc_S_gpio_3ff44800_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44800_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_3ff44800, interrupts, 0)
#define DT_N_S_soc_S_gpio_3ff44800_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_3ff44800, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_3ff44800_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44800_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_gpio_3ff44800_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_gpio_3ff44800_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_gpio_3ff44800_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44800_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_gpio_3ff44800_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44800_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_3ff44800_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/rtc@3ff48000
 *
 * Node identifier: DT_N_S_soc_S_rtc_3ff48000
 *
 * Binding (compatible = espressif,esp32-rtc):
 *   $ZEPHYR_BASE/dts/bindings/clock/espressif,esp32-rtc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_rtc_3ff48000_PATH "/soc/rtc@3ff48000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_rtc_3ff48000_FULL_NAME "rtc@3ff48000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_rtc_3ff48000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_rtc_3ff48000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_rtc_3ff48000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_rtc_3ff48000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_rtc_3ff48000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_rtc_3ff48000_ORD 20

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_rtc_3ff48000_REQUIRES_ORDS \
	8, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_rtc_3ff48000_SUPPORTS_ORDS \
	21, /* /soc/i2c@3ff53000 */ \
	22, /* /soc/i2c@3ff67000 */ \
	28, /* /soc/spi@3ff64000 */ \
	30, /* /soc/uart@3ff40000 */ \
	31, /* /soc/uart@3ff50000 */ \
	32, /* /soc/uart@3ff6e000 */ \
	33, /* /soc/watchdog@3ff5f048 */ \
	34, /* /soc/watchdog@3ff60048 */ \
	43, /* /soc/spi@3ff65000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_rtc_3ff48000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_rtc DT_N_S_soc_S_rtc_3ff48000
#define DT_N_NODELABEL_rtc              DT_N_S_soc_S_rtc_3ff48000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_rtc_3ff48000_REG_NUM 1
#define DT_N_S_soc_S_rtc_3ff48000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_REG_IDX_0_VAL_ADDRESS 1072988160 /* 0x3ff48000 */
#define DT_N_S_soc_S_rtc_3ff48000_REG_IDX_0_VAL_SIZE 216 /* 0xd8 */
#define DT_N_S_soc_S_rtc_3ff48000_RANGES_NUM 0
#define DT_N_S_soc_S_rtc_3ff48000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_rtc_3ff48000_IRQ_NUM 0
#define DT_N_S_soc_S_rtc_3ff48000_COMPAT_MATCHES_espressif_esp32_rtc 1
#define DT_N_S_soc_S_rtc_3ff48000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_rtc_3ff48000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_rtc_3ff48000_P_reg {1072988160 /* 0x3ff48000 */, 216 /* 0xd8 */}
#define DT_N_S_soc_S_rtc_3ff48000_P_reg_IDX_0 1072988160
#define DT_N_S_soc_S_rtc_3ff48000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_P_reg_IDX_1 216
#define DT_N_S_soc_S_rtc_3ff48000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_3ff48000, reg, 0) \
	fn(DT_N_S_soc_S_rtc_3ff48000, reg, 1)
#define DT_N_S_soc_S_rtc_3ff48000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_3ff48000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_rtc_3ff48000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_3ff48000_P_reg_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_P_label "RTC"
#define DT_N_S_soc_S_rtc_3ff48000_P_label_STRING_TOKEN RTC
#define DT_N_S_soc_S_rtc_3ff48000_P_label_STRING_UPPER_TOKEN RTC
#define DT_N_S_soc_S_rtc_3ff48000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_3ff48000, label, 0) \
	fn(DT_N_S_soc_S_rtc_3ff48000, label, 1) \
	fn(DT_N_S_soc_S_rtc_3ff48000, label, 2)
#define DT_N_S_soc_S_rtc_3ff48000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_3ff48000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_rtc_3ff48000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_rtc_3ff48000, label, 2, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_3ff48000_P_label_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_P_xtal_freq 2
#define DT_N_S_soc_S_rtc_3ff48000_P_xtal_freq_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_P_status "ok"
#define DT_N_S_soc_S_rtc_3ff48000_P_status_STRING_TOKEN ok
#define DT_N_S_soc_S_rtc_3ff48000_P_status_STRING_UPPER_TOKEN OK
#define DT_N_S_soc_S_rtc_3ff48000_P_status_ENUM_IDX 0
#define DT_N_S_soc_S_rtc_3ff48000_P_status_ENUM_TOKEN ok
#define DT_N_S_soc_S_rtc_3ff48000_P_status_ENUM_UPPER_TOKEN OK
#define DT_N_S_soc_S_rtc_3ff48000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_3ff48000, status, 0) \
	fn(DT_N_S_soc_S_rtc_3ff48000, status, 1)
#define DT_N_S_soc_S_rtc_3ff48000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_3ff48000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_rtc_3ff48000, status, 1, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_3ff48000_P_status_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_P_compatible {"espressif,esp32-rtc"}
#define DT_N_S_soc_S_rtc_3ff48000_P_compatible_IDX_0 "espressif,esp32-rtc"
#define DT_N_S_soc_S_rtc_3ff48000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_3ff48000, compatible, 0)
#define DT_N_S_soc_S_rtc_3ff48000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_3ff48000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_3ff48000_P_compatible_LEN 1
#define DT_N_S_soc_S_rtc_3ff48000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_P_wakeup_source 0
#define DT_N_S_soc_S_rtc_3ff48000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/i2c@3ff53000
 *
 * Node identifier: DT_N_S_soc_S_i2c_3ff53000
 *
 * Binding (compatible = espressif,esp32-i2c):
 *   $ZEPHYR_BASE/dts/bindings/i2c/espressif,esp32-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_i2c_3ff53000_PATH "/soc/i2c@3ff53000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_i2c_3ff53000_FULL_NAME "i2c@3ff53000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_i2c_3ff53000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_i2c_3ff53000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_i2c_3ff53000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2c_3ff53000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_i2c_3ff53000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_i2c_3ff53000_ORD 21

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_i2c_3ff53000_REQUIRES_ORDS \
	8, /* /soc */ \
	9, /* /soc/interrupt-controller@3ff00104 */ \
	20, /* /soc/rtc@3ff48000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_i2c_3ff53000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_i2c_3ff53000_EXISTS 1
#define DT_N_ALIAS_i2c_0                DT_N_S_soc_S_i2c_3ff53000
#define DT_N_INST_0_espressif_esp32_i2c DT_N_S_soc_S_i2c_3ff53000
#define DT_N_NODELABEL_i2c0             DT_N_S_soc_S_i2c_3ff53000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_i2c_3ff53000_REG_NUM 1
#define DT_N_S_soc_S_i2c_3ff53000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_REG_IDX_0_VAL_ADDRESS 1073033216 /* 0x3ff53000 */
#define DT_N_S_soc_S_i2c_3ff53000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_i2c_3ff53000_RANGES_NUM 0
#define DT_N_S_soc_S_i2c_3ff53000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_i2c_3ff53000_IRQ_NUM 1
#define DT_N_S_soc_S_i2c_3ff53000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_IRQ_IDX_0_VAL_irq 49
#define DT_N_S_soc_S_i2c_3ff53000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_COMPAT_MATCHES_espressif_esp32_i2c 1
#define DT_N_S_soc_S_i2c_3ff53000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_i2c_3ff53000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_i2c_3ff53000_P_reg {1073033216 /* 0x3ff53000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_i2c_3ff53000_P_reg_IDX_0 1073033216
#define DT_N_S_soc_S_i2c_3ff53000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_i2c_3ff53000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff53000, reg, 0) \
	fn(DT_N_S_soc_S_i2c_3ff53000, reg, 1)
#define DT_N_S_soc_S_i2c_3ff53000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_3ff53000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_3ff53000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff53000_P_reg_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_interrupts {49 /* 0x31 */}
#define DT_N_S_soc_S_i2c_3ff53000_P_interrupts_IDX_0 49
#define DT_N_S_soc_S_i2c_3ff53000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff53000, interrupts, 0)
#define DT_N_S_soc_S_i2c_3ff53000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_3ff53000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff53000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_sda_pin 21
#define DT_N_S_soc_S_i2c_3ff53000_P_sda_pin_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_scl_pin 22
#define DT_N_S_soc_S_i2c_3ff53000_P_scl_pin_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_tx_lsb 0
#define DT_N_S_soc_S_i2c_3ff53000_P_tx_lsb_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_rx_lsb 0
#define DT_N_S_soc_S_i2c_3ff53000_P_rx_lsb_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_clock_frequency 100000
#define DT_N_S_soc_S_i2c_3ff53000_P_clock_frequency_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_label "I2C_0"
#define DT_N_S_soc_S_i2c_3ff53000_P_label_STRING_TOKEN I2C_0
#define DT_N_S_soc_S_i2c_3ff53000_P_label_STRING_UPPER_TOKEN I2C_0
#define DT_N_S_soc_S_i2c_3ff53000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff53000, label, 0) \
	fn(DT_N_S_soc_S_i2c_3ff53000, label, 1) \
	fn(DT_N_S_soc_S_i2c_3ff53000, label, 2) \
	fn(DT_N_S_soc_S_i2c_3ff53000, label, 3) \
	fn(DT_N_S_soc_S_i2c_3ff53000, label, 4)
#define DT_N_S_soc_S_i2c_3ff53000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_3ff53000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_3ff53000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_3ff53000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_3ff53000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_3ff53000, label, 4, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff53000_P_label_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_status "okay"
#define DT_N_S_soc_S_i2c_3ff53000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_i2c_3ff53000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_i2c_3ff53000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_i2c_3ff53000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_i2c_3ff53000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_i2c_3ff53000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff53000, status, 0) \
	fn(DT_N_S_soc_S_i2c_3ff53000, status, 1) \
	fn(DT_N_S_soc_S_i2c_3ff53000, status, 2) \
	fn(DT_N_S_soc_S_i2c_3ff53000, status, 3)
#define DT_N_S_soc_S_i2c_3ff53000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_3ff53000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_3ff53000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_3ff53000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_3ff53000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff53000_P_status_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_compatible {"espressif,esp32-i2c"}
#define DT_N_S_soc_S_i2c_3ff53000_P_compatible_IDX_0 "espressif,esp32-i2c"
#define DT_N_S_soc_S_i2c_3ff53000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff53000, compatible, 0)
#define DT_N_S_soc_S_i2c_3ff53000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_3ff53000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff53000_P_compatible_LEN 1
#define DT_N_S_soc_S_i2c_3ff53000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_i2c_3ff53000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_i2c_3ff53000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_i2c_3ff53000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_i2c_3ff53000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_i2c_3ff53000_P_clocks_IDX_0_VAL_offset 4
#define DT_N_S_soc_S_i2c_3ff53000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff53000, clocks, 0)
#define DT_N_S_soc_S_i2c_3ff53000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_3ff53000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff53000_P_clocks_LEN 1
#define DT_N_S_soc_S_i2c_3ff53000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_wakeup_source 0
#define DT_N_S_soc_S_i2c_3ff53000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/i2c@3ff67000
 *
 * Node identifier: DT_N_S_soc_S_i2c_3ff67000
 *
 * Binding (compatible = espressif,esp32-i2c):
 *   $ZEPHYR_BASE/dts/bindings/i2c/espressif,esp32-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_i2c_3ff67000_PATH "/soc/i2c@3ff67000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_i2c_3ff67000_FULL_NAME "i2c@3ff67000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_i2c_3ff67000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_i2c_3ff67000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_i2c_3ff67000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2c_3ff67000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_i2c_3ff67000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_i2c_3ff67000_ORD 22

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_i2c_3ff67000_REQUIRES_ORDS \
	8, /* /soc */ \
	9, /* /soc/interrupt-controller@3ff00104 */ \
	20, /* /soc/rtc@3ff48000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_i2c_3ff67000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_i2c_3ff67000_EXISTS 1
#define DT_N_INST_1_espressif_esp32_i2c DT_N_S_soc_S_i2c_3ff67000
#define DT_N_NODELABEL_i2c1             DT_N_S_soc_S_i2c_3ff67000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_i2c_3ff67000_REG_NUM 1
#define DT_N_S_soc_S_i2c_3ff67000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_REG_IDX_0_VAL_ADDRESS 1073115136 /* 0x3ff67000 */
#define DT_N_S_soc_S_i2c_3ff67000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_i2c_3ff67000_RANGES_NUM 0
#define DT_N_S_soc_S_i2c_3ff67000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_i2c_3ff67000_IRQ_NUM 1
#define DT_N_S_soc_S_i2c_3ff67000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_IRQ_IDX_0_VAL_irq 50
#define DT_N_S_soc_S_i2c_3ff67000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_COMPAT_MATCHES_espressif_esp32_i2c 1
#define DT_N_S_soc_S_i2c_3ff67000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_i2c_3ff67000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_i2c_3ff67000_P_reg {1073115136 /* 0x3ff67000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_i2c_3ff67000_P_reg_IDX_0 1073115136
#define DT_N_S_soc_S_i2c_3ff67000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_i2c_3ff67000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff67000, reg, 0) \
	fn(DT_N_S_soc_S_i2c_3ff67000, reg, 1)
#define DT_N_S_soc_S_i2c_3ff67000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_3ff67000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_3ff67000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff67000_P_reg_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_interrupts {50 /* 0x32 */}
#define DT_N_S_soc_S_i2c_3ff67000_P_interrupts_IDX_0 50
#define DT_N_S_soc_S_i2c_3ff67000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff67000, interrupts, 0)
#define DT_N_S_soc_S_i2c_3ff67000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_3ff67000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff67000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_tx_lsb 0
#define DT_N_S_soc_S_i2c_3ff67000_P_tx_lsb_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_rx_lsb 0
#define DT_N_S_soc_S_i2c_3ff67000_P_rx_lsb_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_label "I2C_1"
#define DT_N_S_soc_S_i2c_3ff67000_P_label_STRING_TOKEN I2C_1
#define DT_N_S_soc_S_i2c_3ff67000_P_label_STRING_UPPER_TOKEN I2C_1
#define DT_N_S_soc_S_i2c_3ff67000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff67000, label, 0) \
	fn(DT_N_S_soc_S_i2c_3ff67000, label, 1) \
	fn(DT_N_S_soc_S_i2c_3ff67000, label, 2) \
	fn(DT_N_S_soc_S_i2c_3ff67000, label, 3) \
	fn(DT_N_S_soc_S_i2c_3ff67000, label, 4)
#define DT_N_S_soc_S_i2c_3ff67000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_3ff67000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_3ff67000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_3ff67000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_3ff67000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_3ff67000, label, 4, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff67000_P_label_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_status "disabled"
#define DT_N_S_soc_S_i2c_3ff67000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_i2c_3ff67000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_i2c_3ff67000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_i2c_3ff67000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_i2c_3ff67000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_i2c_3ff67000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff67000, status, 0) \
	fn(DT_N_S_soc_S_i2c_3ff67000, status, 1) \
	fn(DT_N_S_soc_S_i2c_3ff67000, status, 2) \
	fn(DT_N_S_soc_S_i2c_3ff67000, status, 3) \
	fn(DT_N_S_soc_S_i2c_3ff67000, status, 4) \
	fn(DT_N_S_soc_S_i2c_3ff67000, status, 5) \
	fn(DT_N_S_soc_S_i2c_3ff67000, status, 6) \
	fn(DT_N_S_soc_S_i2c_3ff67000, status, 7)
#define DT_N_S_soc_S_i2c_3ff67000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_3ff67000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_3ff67000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_3ff67000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_3ff67000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_3ff67000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_3ff67000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_3ff67000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_3ff67000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff67000_P_status_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_compatible {"espressif,esp32-i2c"}
#define DT_N_S_soc_S_i2c_3ff67000_P_compatible_IDX_0 "espressif,esp32-i2c"
#define DT_N_S_soc_S_i2c_3ff67000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff67000, compatible, 0)
#define DT_N_S_soc_S_i2c_3ff67000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_3ff67000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff67000_P_compatible_LEN 1
#define DT_N_S_soc_S_i2c_3ff67000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_i2c_3ff67000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_i2c_3ff67000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_i2c_3ff67000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_i2c_3ff67000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_i2c_3ff67000_P_clocks_IDX_0_VAL_offset 5
#define DT_N_S_soc_S_i2c_3ff67000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff67000, clocks, 0)
#define DT_N_S_soc_S_i2c_3ff67000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_3ff67000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_3ff67000_P_clocks_LEN 1
#define DT_N_S_soc_S_i2c_3ff67000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_wakeup_source 0
#define DT_N_S_soc_S_i2c_3ff67000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/ipi@3f4c0058
 *
 * Node identifier: DT_N_S_soc_S_ipi_3f4c0058
 */

/* Node's full path: */
#define DT_N_S_soc_S_ipi_3f4c0058_PATH "/soc/ipi@3f4c0058"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_ipi_3f4c0058_FULL_NAME "ipi@3f4c0058"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_ipi_3f4c0058_PARENT DT_N_S_soc
#define DT_N_S_soc_S_ipi_3f4c0058_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_ipi_3f4c0058_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_ipi_3f4c0058_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_ipi_3f4c0058_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_ipi_3f4c0058_ORD 23

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_ipi_3f4c0058_REQUIRES_ORDS \
	8, /* /soc */ \
	9, /* /soc/interrupt-controller@3ff00104 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_ipi_3f4c0058_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_ipi_3f4c0058_EXISTS 1
#define DT_N_INST_0_espressif_crosscore_interrupt DT_N_S_soc_S_ipi_3f4c0058
#define DT_N_NODELABEL_ipi0                       DT_N_S_soc_S_ipi_3f4c0058

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_ipi_3f4c0058_REG_NUM 1
#define DT_N_S_soc_S_ipi_3f4c0058_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c0058_REG_IDX_0_VAL_ADDRESS 1061945432 /* 0x3f4c0058 */
#define DT_N_S_soc_S_ipi_3f4c0058_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_ipi_3f4c0058_RANGES_NUM 0
#define DT_N_S_soc_S_ipi_3f4c0058_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_ipi_3f4c0058_IRQ_NUM 1
#define DT_N_S_soc_S_ipi_3f4c0058_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c0058_IRQ_IDX_0_VAL_irq 24
#define DT_N_S_soc_S_ipi_3f4c0058_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c0058_COMPAT_MATCHES_espressif_crosscore_interrupt 1
#define DT_N_S_soc_S_ipi_3f4c0058_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_ipi_3f4c0058_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_ipi_3f4c0058_P_compatible {"espressif,crosscore-interrupt"}
#define DT_N_S_soc_S_ipi_3f4c0058_P_compatible_IDX_0 "espressif,crosscore-interrupt"
#define DT_N_S_soc_S_ipi_3f4c0058_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c0058_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ipi_3f4c0058, compatible, 0)
#define DT_N_S_soc_S_ipi_3f4c0058_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ipi_3f4c0058, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ipi_3f4c0058_P_compatible_LEN 1
#define DT_N_S_soc_S_ipi_3f4c0058_P_compatible_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c0058_P_label "IPI0"
#define DT_N_S_soc_S_ipi_3f4c0058_P_label_STRING_TOKEN IPI0
#define DT_N_S_soc_S_ipi_3f4c0058_P_label_STRING_UPPER_TOKEN IPI0
#define DT_N_S_soc_S_ipi_3f4c0058_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ipi_3f4c0058, label, 0) \
	fn(DT_N_S_soc_S_ipi_3f4c0058, label, 1) \
	fn(DT_N_S_soc_S_ipi_3f4c0058, label, 2) \
	fn(DT_N_S_soc_S_ipi_3f4c0058, label, 3)
#define DT_N_S_soc_S_ipi_3f4c0058_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ipi_3f4c0058, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ipi_3f4c0058, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ipi_3f4c0058, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ipi_3f4c0058, label, 3, __VA_ARGS__)
#define DT_N_S_soc_S_ipi_3f4c0058_P_label_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c0058_P_reg {1061945432 /* 0x3f4c0058 */, 4 /* 0x4 */}
#define DT_N_S_soc_S_ipi_3f4c0058_P_reg_IDX_0 1061945432
#define DT_N_S_soc_S_ipi_3f4c0058_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c0058_P_reg_IDX_1 4
#define DT_N_S_soc_S_ipi_3f4c0058_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c0058_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ipi_3f4c0058, reg, 0) \
	fn(DT_N_S_soc_S_ipi_3f4c0058, reg, 1)
#define DT_N_S_soc_S_ipi_3f4c0058_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ipi_3f4c0058, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ipi_3f4c0058, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_ipi_3f4c0058_P_reg_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c0058_P_interrupts {24 /* 0x18 */}
#define DT_N_S_soc_S_ipi_3f4c0058_P_interrupts_IDX_0 24
#define DT_N_S_soc_S_ipi_3f4c0058_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c0058_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ipi_3f4c0058, interrupts, 0)
#define DT_N_S_soc_S_ipi_3f4c0058_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ipi_3f4c0058, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ipi_3f4c0058_P_interrupts_EXISTS 1

/*
 * Devicetree node: /soc/ipi@3f4c005c
 *
 * Node identifier: DT_N_S_soc_S_ipi_3f4c005c
 */

/* Node's full path: */
#define DT_N_S_soc_S_ipi_3f4c005c_PATH "/soc/ipi@3f4c005c"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_ipi_3f4c005c_FULL_NAME "ipi@3f4c005c"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_ipi_3f4c005c_PARENT DT_N_S_soc
#define DT_N_S_soc_S_ipi_3f4c005c_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_ipi_3f4c005c_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_ipi_3f4c005c_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_ipi_3f4c005c_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_ipi_3f4c005c_ORD 24

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_ipi_3f4c005c_REQUIRES_ORDS \
	8, /* /soc */ \
	9, /* /soc/interrupt-controller@3ff00104 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_ipi_3f4c005c_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_ipi_3f4c005c_EXISTS 1
#define DT_N_INST_1_espressif_crosscore_interrupt DT_N_S_soc_S_ipi_3f4c005c
#define DT_N_NODELABEL_ipi1                       DT_N_S_soc_S_ipi_3f4c005c

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_ipi_3f4c005c_REG_NUM 1
#define DT_N_S_soc_S_ipi_3f4c005c_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c005c_REG_IDX_0_VAL_ADDRESS 1061945436 /* 0x3f4c005c */
#define DT_N_S_soc_S_ipi_3f4c005c_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_ipi_3f4c005c_RANGES_NUM 0
#define DT_N_S_soc_S_ipi_3f4c005c_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_ipi_3f4c005c_IRQ_NUM 1
#define DT_N_S_soc_S_ipi_3f4c005c_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c005c_IRQ_IDX_0_VAL_irq 25
#define DT_N_S_soc_S_ipi_3f4c005c_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c005c_COMPAT_MATCHES_espressif_crosscore_interrupt 1
#define DT_N_S_soc_S_ipi_3f4c005c_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_ipi_3f4c005c_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_ipi_3f4c005c_P_compatible {"espressif,crosscore-interrupt"}
#define DT_N_S_soc_S_ipi_3f4c005c_P_compatible_IDX_0 "espressif,crosscore-interrupt"
#define DT_N_S_soc_S_ipi_3f4c005c_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c005c_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ipi_3f4c005c, compatible, 0)
#define DT_N_S_soc_S_ipi_3f4c005c_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ipi_3f4c005c, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ipi_3f4c005c_P_compatible_LEN 1
#define DT_N_S_soc_S_ipi_3f4c005c_P_compatible_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c005c_P_label "IPI1"
#define DT_N_S_soc_S_ipi_3f4c005c_P_label_STRING_TOKEN IPI1
#define DT_N_S_soc_S_ipi_3f4c005c_P_label_STRING_UPPER_TOKEN IPI1
#define DT_N_S_soc_S_ipi_3f4c005c_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ipi_3f4c005c, label, 0) \
	fn(DT_N_S_soc_S_ipi_3f4c005c, label, 1) \
	fn(DT_N_S_soc_S_ipi_3f4c005c, label, 2) \
	fn(DT_N_S_soc_S_ipi_3f4c005c, label, 3)
#define DT_N_S_soc_S_ipi_3f4c005c_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ipi_3f4c005c, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ipi_3f4c005c, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ipi_3f4c005c, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ipi_3f4c005c, label, 3, __VA_ARGS__)
#define DT_N_S_soc_S_ipi_3f4c005c_P_label_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c005c_P_reg {1061945436 /* 0x3f4c005c */, 4 /* 0x4 */}
#define DT_N_S_soc_S_ipi_3f4c005c_P_reg_IDX_0 1061945436
#define DT_N_S_soc_S_ipi_3f4c005c_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c005c_P_reg_IDX_1 4
#define DT_N_S_soc_S_ipi_3f4c005c_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c005c_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ipi_3f4c005c, reg, 0) \
	fn(DT_N_S_soc_S_ipi_3f4c005c, reg, 1)
#define DT_N_S_soc_S_ipi_3f4c005c_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ipi_3f4c005c, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ipi_3f4c005c, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_ipi_3f4c005c_P_reg_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c005c_P_interrupts {25 /* 0x19 */}
#define DT_N_S_soc_S_ipi_3f4c005c_P_interrupts_IDX_0 25
#define DT_N_S_soc_S_ipi_3f4c005c_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ipi_3f4c005c_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ipi_3f4c005c, interrupts, 0)
#define DT_N_S_soc_S_ipi_3f4c005c_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ipi_3f4c005c, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ipi_3f4c005c_P_interrupts_EXISTS 1

/*
 * Devicetree node: /soc/ledc@3ff59000
 *
 * Node identifier: DT_N_S_soc_S_ledc_3ff59000
 *
 * Binding (compatible = espressif,esp32-ledc):
 *   $ZEPHYR_BASE/dts/bindings/pwm/espressif,esp32-ledc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_ledc_3ff59000_PATH "/soc/ledc@3ff59000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_ledc_3ff59000_FULL_NAME "ledc@3ff59000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_ledc_3ff59000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_ledc_3ff59000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_ledc_3ff59000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_ledc_3ff59000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_ledc_3ff59000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_ledc_3ff59000_ORD 25

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_ledc_3ff59000_REQUIRES_ORDS \
	8, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_ledc_3ff59000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_ledc_3ff59000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_ledc DT_N_S_soc_S_ledc_3ff59000
#define DT_N_NODELABEL_ledc0             DT_N_S_soc_S_ledc_3ff59000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_ledc_3ff59000_REG_NUM 1
#define DT_N_S_soc_S_ledc_3ff59000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ledc_3ff59000_REG_IDX_0_VAL_ADDRESS 1073057792 /* 0x3ff59000 */
#define DT_N_S_soc_S_ledc_3ff59000_REG_IDX_0_VAL_SIZE 2048 /* 0x800 */
#define DT_N_S_soc_S_ledc_3ff59000_RANGES_NUM 0
#define DT_N_S_soc_S_ledc_3ff59000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_ledc_3ff59000_IRQ_NUM 0
#define DT_N_S_soc_S_ledc_3ff59000_COMPAT_MATCHES_espressif_esp32_ledc 1
#define DT_N_S_soc_S_ledc_3ff59000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_ledc_3ff59000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_ledc_3ff59000_P_label "LEDC_0"
#define DT_N_S_soc_S_ledc_3ff59000_P_label_STRING_TOKEN LEDC_0
#define DT_N_S_soc_S_ledc_3ff59000_P_label_STRING_UPPER_TOKEN LEDC_0
#define DT_N_S_soc_S_ledc_3ff59000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ledc_3ff59000, label, 0) \
	fn(DT_N_S_soc_S_ledc_3ff59000, label, 1) \
	fn(DT_N_S_soc_S_ledc_3ff59000, label, 2) \
	fn(DT_N_S_soc_S_ledc_3ff59000, label, 3) \
	fn(DT_N_S_soc_S_ledc_3ff59000, label, 4) \
	fn(DT_N_S_soc_S_ledc_3ff59000, label, 5)
#define DT_N_S_soc_S_ledc_3ff59000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ledc_3ff59000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ledc_3ff59000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ledc_3ff59000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ledc_3ff59000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ledc_3ff59000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ledc_3ff59000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_ledc_3ff59000_P_label_EXISTS 1
#define DT_N_S_soc_S_ledc_3ff59000_P_status "disabled"
#define DT_N_S_soc_S_ledc_3ff59000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_ledc_3ff59000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_ledc_3ff59000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_ledc_3ff59000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_ledc_3ff59000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_ledc_3ff59000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ledc_3ff59000, status, 0) \
	fn(DT_N_S_soc_S_ledc_3ff59000, status, 1) \
	fn(DT_N_S_soc_S_ledc_3ff59000, status, 2) \
	fn(DT_N_S_soc_S_ledc_3ff59000, status, 3) \
	fn(DT_N_S_soc_S_ledc_3ff59000, status, 4) \
	fn(DT_N_S_soc_S_ledc_3ff59000, status, 5) \
	fn(DT_N_S_soc_S_ledc_3ff59000, status, 6) \
	fn(DT_N_S_soc_S_ledc_3ff59000, status, 7)
#define DT_N_S_soc_S_ledc_3ff59000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ledc_3ff59000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ledc_3ff59000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ledc_3ff59000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ledc_3ff59000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ledc_3ff59000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ledc_3ff59000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ledc_3ff59000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ledc_3ff59000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_ledc_3ff59000_P_status_EXISTS 1
#define DT_N_S_soc_S_ledc_3ff59000_P_compatible {"espressif,esp32-ledc"}
#define DT_N_S_soc_S_ledc_3ff59000_P_compatible_IDX_0 "espressif,esp32-ledc"
#define DT_N_S_soc_S_ledc_3ff59000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ledc_3ff59000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ledc_3ff59000, compatible, 0)
#define DT_N_S_soc_S_ledc_3ff59000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ledc_3ff59000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ledc_3ff59000_P_compatible_LEN 1
#define DT_N_S_soc_S_ledc_3ff59000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_ledc_3ff59000_P_reg {1073057792 /* 0x3ff59000 */, 2048 /* 0x800 */}
#define DT_N_S_soc_S_ledc_3ff59000_P_reg_IDX_0 1073057792
#define DT_N_S_soc_S_ledc_3ff59000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ledc_3ff59000_P_reg_IDX_1 2048
#define DT_N_S_soc_S_ledc_3ff59000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ledc_3ff59000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ledc_3ff59000, reg, 0) \
	fn(DT_N_S_soc_S_ledc_3ff59000, reg, 1)
#define DT_N_S_soc_S_ledc_3ff59000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ledc_3ff59000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ledc_3ff59000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_ledc_3ff59000_P_reg_EXISTS 1
#define DT_N_S_soc_S_ledc_3ff59000_P_wakeup_source 0
#define DT_N_S_soc_S_ledc_3ff59000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/memory@3ffb0000
 *
 * Node identifier: DT_N_S_soc_S_memory_3ffb0000
 *
 * Binding (compatible = mmio-sram):
 *   $ZEPHYR_BASE/dts/bindings/sram/mmio-sram.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_memory_3ffb0000_PATH "/soc/memory@3ffb0000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_memory_3ffb0000_FULL_NAME "memory@3ffb0000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_memory_3ffb0000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_memory_3ffb0000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_memory_3ffb0000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_memory_3ffb0000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_memory_3ffb0000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_memory_3ffb0000_ORD 26

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_memory_3ffb0000_REQUIRES_ORDS \
	8, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_memory_3ffb0000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_memory_3ffb0000_EXISTS 1
#define DT_N_INST_0_mmio_sram DT_N_S_soc_S_memory_3ffb0000
#define DT_N_NODELABEL_sram0  DT_N_S_soc_S_memory_3ffb0000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_memory_3ffb0000_REG_NUM 1
#define DT_N_S_soc_S_memory_3ffb0000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_3ffb0000_REG_IDX_0_VAL_ADDRESS 1073414144 /* 0x3ffb0000 */
#define DT_N_S_soc_S_memory_3ffb0000_REG_IDX_0_VAL_SIZE 327680 /* 0x50000 */
#define DT_N_S_soc_S_memory_3ffb0000_RANGES_NUM 0
#define DT_N_S_soc_S_memory_3ffb0000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_memory_3ffb0000_IRQ_NUM 0
#define DT_N_S_soc_S_memory_3ffb0000_COMPAT_MATCHES_mmio_sram 1
#define DT_N_S_soc_S_memory_3ffb0000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_memory_3ffb0000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_memory_3ffb0000_P_reg {1073414144 /* 0x3ffb0000 */, 327680 /* 0x50000 */}
#define DT_N_S_soc_S_memory_3ffb0000_P_reg_IDX_0 1073414144
#define DT_N_S_soc_S_memory_3ffb0000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_3ffb0000_P_reg_IDX_1 327680
#define DT_N_S_soc_S_memory_3ffb0000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_memory_3ffb0000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_memory_3ffb0000, reg, 0) \
	fn(DT_N_S_soc_S_memory_3ffb0000, reg, 1)
#define DT_N_S_soc_S_memory_3ffb0000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_3ffb0000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_memory_3ffb0000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_memory_3ffb0000_P_reg_EXISTS 1
#define DT_N_S_soc_S_memory_3ffb0000_P_compatible {"mmio-sram"}
#define DT_N_S_soc_S_memory_3ffb0000_P_compatible_IDX_0 "mmio-sram"
#define DT_N_S_soc_S_memory_3ffb0000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_3ffb0000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_memory_3ffb0000, compatible, 0)
#define DT_N_S_soc_S_memory_3ffb0000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_3ffb0000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_memory_3ffb0000_P_compatible_LEN 1
#define DT_N_S_soc_S_memory_3ffb0000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_memory_3ffb0000_P_wakeup_source 0
#define DT_N_S_soc_S_memory_3ffb0000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/pinmux@3ff49000
 *
 * Node identifier: DT_N_S_soc_S_pinmux_3ff49000
 *
 * Binding (compatible = espressif,esp32-pinmux):
 *   $ZEPHYR_BASE/dts/bindings/pinctrl/espressif,esp32-pinmux.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_pinmux_3ff49000_PATH "/soc/pinmux@3ff49000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_pinmux_3ff49000_FULL_NAME "pinmux@3ff49000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_pinmux_3ff49000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_pinmux_3ff49000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_pinmux_3ff49000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_pinmux_3ff49000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_pinmux_3ff49000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_pinmux_3ff49000_ORD 27

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_pinmux_3ff49000_REQUIRES_ORDS \
	8, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_pinmux_3ff49000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_pinmux_3ff49000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_pinmux DT_N_S_soc_S_pinmux_3ff49000
#define DT_N_NODELABEL_pinmux              DT_N_S_soc_S_pinmux_3ff49000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_pinmux_3ff49000_REG_NUM 1
#define DT_N_S_soc_S_pinmux_3ff49000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pinmux_3ff49000_REG_IDX_0_VAL_ADDRESS 1072992256 /* 0x3ff49000 */
#define DT_N_S_soc_S_pinmux_3ff49000_REG_IDX_0_VAL_SIZE 148 /* 0x94 */
#define DT_N_S_soc_S_pinmux_3ff49000_RANGES_NUM 0
#define DT_N_S_soc_S_pinmux_3ff49000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_pinmux_3ff49000_IRQ_NUM 0
#define DT_N_S_soc_S_pinmux_3ff49000_COMPAT_MATCHES_espressif_esp32_pinmux 1
#define DT_N_S_soc_S_pinmux_3ff49000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_pinmux_3ff49000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_pinmux_3ff49000_P_reg {1072992256 /* 0x3ff49000 */, 148 /* 0x94 */}
#define DT_N_S_soc_S_pinmux_3ff49000_P_reg_IDX_0 1072992256
#define DT_N_S_soc_S_pinmux_3ff49000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pinmux_3ff49000_P_reg_IDX_1 148
#define DT_N_S_soc_S_pinmux_3ff49000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_pinmux_3ff49000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pinmux_3ff49000, reg, 0) \
	fn(DT_N_S_soc_S_pinmux_3ff49000, reg, 1)
#define DT_N_S_soc_S_pinmux_3ff49000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pinmux_3ff49000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_pinmux_3ff49000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_pinmux_3ff49000_P_reg_EXISTS 1
#define DT_N_S_soc_S_pinmux_3ff49000_P_compatible {"espressif,esp32-pinmux"}
#define DT_N_S_soc_S_pinmux_3ff49000_P_compatible_IDX_0 "espressif,esp32-pinmux"
#define DT_N_S_soc_S_pinmux_3ff49000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pinmux_3ff49000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pinmux_3ff49000, compatible, 0)
#define DT_N_S_soc_S_pinmux_3ff49000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pinmux_3ff49000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pinmux_3ff49000_P_compatible_LEN 1
#define DT_N_S_soc_S_pinmux_3ff49000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_pinmux_3ff49000_P_wakeup_source 0
#define DT_N_S_soc_S_pinmux_3ff49000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/spi@3ff64000
 *
 * Node identifier: DT_N_S_soc_S_spi_3ff64000
 *
 * Binding (compatible = espressif,esp32-spi):
 *   $ZEPHYR_BASE/dts/bindings/spi/espressif,esp32-spi.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_spi_3ff64000_PATH "/soc/spi@3ff64000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_spi_3ff64000_FULL_NAME "spi@3ff64000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_spi_3ff64000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_spi_3ff64000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_spi_3ff64000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_spi_3ff64000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_spi_3ff64000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_spi_3ff64000_ORD 28

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_spi_3ff64000_REQUIRES_ORDS \
	8, /* /soc */ \
	9, /* /soc/interrupt-controller@3ff00104 */ \
	20, /* /soc/rtc@3ff48000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_spi_3ff64000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_spi_3ff64000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_spi DT_N_S_soc_S_spi_3ff64000
#define DT_N_NODELABEL_spi2             DT_N_S_soc_S_spi_3ff64000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_spi_3ff64000_REG_NUM 1
#define DT_N_S_soc_S_spi_3ff64000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_REG_IDX_0_VAL_ADDRESS 1073102848 /* 0x3ff64000 */
#define DT_N_S_soc_S_spi_3ff64000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_spi_3ff64000_RANGES_NUM 0
#define DT_N_S_soc_S_spi_3ff64000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_spi_3ff64000_IRQ_NUM 1
#define DT_N_S_soc_S_spi_3ff64000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_IRQ_IDX_0_VAL_irq 30
#define DT_N_S_soc_S_spi_3ff64000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_COMPAT_MATCHES_espressif_esp32_spi 1
#define DT_N_S_soc_S_spi_3ff64000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_spi_3ff64000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_spi_3ff64000_P_reg {1073102848 /* 0x3ff64000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_spi_3ff64000_P_reg_IDX_0 1073102848
#define DT_N_S_soc_S_spi_3ff64000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_spi_3ff64000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff64000, reg, 0) \
	fn(DT_N_S_soc_S_spi_3ff64000, reg, 1)
#define DT_N_S_soc_S_spi_3ff64000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff64000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff64000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff64000_P_reg_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_interrupts {30 /* 0x1e */}
#define DT_N_S_soc_S_spi_3ff64000_P_interrupts_IDX_0 30
#define DT_N_S_soc_S_spi_3ff64000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff64000, interrupts, 0)
#define DT_N_S_soc_S_spi_3ff64000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff64000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff64000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_miso_pin 12
#define DT_N_S_soc_S_spi_3ff64000_P_miso_pin_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_mosi_pin 13
#define DT_N_S_soc_S_spi_3ff64000_P_mosi_pin_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_sclk_pin 14
#define DT_N_S_soc_S_spi_3ff64000_P_sclk_pin_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_csel_pin 15
#define DT_N_S_soc_S_spi_3ff64000_P_csel_pin_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_use_iomux 1
#define DT_N_S_soc_S_spi_3ff64000_P_use_iomux_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_half_duplex 0
#define DT_N_S_soc_S_spi_3ff64000_P_half_duplex_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_dummy_comp 0
#define DT_N_S_soc_S_spi_3ff64000_P_dummy_comp_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_sio 0
#define DT_N_S_soc_S_spi_3ff64000_P_sio_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_dma 0
#define DT_N_S_soc_S_spi_3ff64000_P_dma_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_clk_as_cs 0
#define DT_N_S_soc_S_spi_3ff64000_P_clk_as_cs_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_positive_cs 0
#define DT_N_S_soc_S_spi_3ff64000_P_positive_cs_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_label "SPI_2"
#define DT_N_S_soc_S_spi_3ff64000_P_label_STRING_TOKEN SPI_2
#define DT_N_S_soc_S_spi_3ff64000_P_label_STRING_UPPER_TOKEN SPI_2
#define DT_N_S_soc_S_spi_3ff64000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff64000, label, 0) \
	fn(DT_N_S_soc_S_spi_3ff64000, label, 1) \
	fn(DT_N_S_soc_S_spi_3ff64000, label, 2) \
	fn(DT_N_S_soc_S_spi_3ff64000, label, 3) \
	fn(DT_N_S_soc_S_spi_3ff64000, label, 4)
#define DT_N_S_soc_S_spi_3ff64000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff64000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff64000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff64000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff64000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff64000, label, 4, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff64000_P_label_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_status "okay"
#define DT_N_S_soc_S_spi_3ff64000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_spi_3ff64000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_spi_3ff64000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_spi_3ff64000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_spi_3ff64000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_spi_3ff64000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff64000, status, 0) \
	fn(DT_N_S_soc_S_spi_3ff64000, status, 1) \
	fn(DT_N_S_soc_S_spi_3ff64000, status, 2) \
	fn(DT_N_S_soc_S_spi_3ff64000, status, 3)
#define DT_N_S_soc_S_spi_3ff64000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff64000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff64000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff64000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff64000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff64000_P_status_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_compatible {"espressif,esp32-spi"}
#define DT_N_S_soc_S_spi_3ff64000_P_compatible_IDX_0 "espressif,esp32-spi"
#define DT_N_S_soc_S_spi_3ff64000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff64000, compatible, 0)
#define DT_N_S_soc_S_spi_3ff64000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff64000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff64000_P_compatible_LEN 1
#define DT_N_S_soc_S_spi_3ff64000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_spi_3ff64000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_spi_3ff64000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_spi_3ff64000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_spi_3ff64000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_spi_3ff64000_P_clocks_IDX_0_VAL_offset 19
#define DT_N_S_soc_S_spi_3ff64000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff64000, clocks, 0)
#define DT_N_S_soc_S_spi_3ff64000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff64000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff64000_P_clocks_LEN 1
#define DT_N_S_soc_S_spi_3ff64000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_wakeup_source 0
#define DT_N_S_soc_S_spi_3ff64000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/trng@3ff75144
 *
 * Node identifier: DT_N_S_soc_S_trng_3ff75144
 *
 * Binding (compatible = espressif,esp32-trng):
 *   $ZEPHYR_BASE/dts/bindings/rng/espressif,esp32-trng.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_trng_3ff75144_PATH "/soc/trng@3ff75144"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_trng_3ff75144_FULL_NAME "trng@3ff75144"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_trng_3ff75144_PARENT DT_N_S_soc
#define DT_N_S_soc_S_trng_3ff75144_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_trng_3ff75144_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_trng_3ff75144_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_trng_3ff75144_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_trng_3ff75144_ORD 29

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_trng_3ff75144_REQUIRES_ORDS \
	8, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_trng_3ff75144_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_trng_3ff75144_EXISTS 1
#define DT_N_INST_0_espressif_esp32_trng DT_N_S_soc_S_trng_3ff75144
#define DT_N_NODELABEL_trng0             DT_N_S_soc_S_trng_3ff75144

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_trng_3ff75144_REG_NUM 1
#define DT_N_S_soc_S_trng_3ff75144_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_trng_3ff75144_REG_IDX_0_VAL_ADDRESS 1073172804 /* 0x3ff75144 */
#define DT_N_S_soc_S_trng_3ff75144_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_trng_3ff75144_RANGES_NUM 0
#define DT_N_S_soc_S_trng_3ff75144_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_trng_3ff75144_IRQ_NUM 0
#define DT_N_S_soc_S_trng_3ff75144_COMPAT_MATCHES_espressif_esp32_trng 1
#define DT_N_S_soc_S_trng_3ff75144_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_trng_3ff75144_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_trng_3ff75144_P_reg {1073172804 /* 0x3ff75144 */, 4 /* 0x4 */}
#define DT_N_S_soc_S_trng_3ff75144_P_reg_IDX_0 1073172804
#define DT_N_S_soc_S_trng_3ff75144_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_trng_3ff75144_P_reg_IDX_1 4
#define DT_N_S_soc_S_trng_3ff75144_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_trng_3ff75144_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_trng_3ff75144, reg, 0) \
	fn(DT_N_S_soc_S_trng_3ff75144, reg, 1)
#define DT_N_S_soc_S_trng_3ff75144_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_trng_3ff75144, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_trng_3ff75144, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_trng_3ff75144_P_reg_EXISTS 1
#define DT_N_S_soc_S_trng_3ff75144_P_label "TRNG_0"
#define DT_N_S_soc_S_trng_3ff75144_P_label_STRING_TOKEN TRNG_0
#define DT_N_S_soc_S_trng_3ff75144_P_label_STRING_UPPER_TOKEN TRNG_0
#define DT_N_S_soc_S_trng_3ff75144_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_trng_3ff75144, label, 0) \
	fn(DT_N_S_soc_S_trng_3ff75144, label, 1) \
	fn(DT_N_S_soc_S_trng_3ff75144, label, 2) \
	fn(DT_N_S_soc_S_trng_3ff75144, label, 3) \
	fn(DT_N_S_soc_S_trng_3ff75144, label, 4) \
	fn(DT_N_S_soc_S_trng_3ff75144, label, 5)
#define DT_N_S_soc_S_trng_3ff75144_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_trng_3ff75144, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_trng_3ff75144, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_trng_3ff75144, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_trng_3ff75144, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_trng_3ff75144, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_trng_3ff75144, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_trng_3ff75144_P_label_EXISTS 1
#define DT_N_S_soc_S_trng_3ff75144_P_status "okay"
#define DT_N_S_soc_S_trng_3ff75144_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_trng_3ff75144_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_trng_3ff75144_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_trng_3ff75144_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_trng_3ff75144_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_trng_3ff75144_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_trng_3ff75144, status, 0) \
	fn(DT_N_S_soc_S_trng_3ff75144, status, 1) \
	fn(DT_N_S_soc_S_trng_3ff75144, status, 2) \
	fn(DT_N_S_soc_S_trng_3ff75144, status, 3)
#define DT_N_S_soc_S_trng_3ff75144_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_trng_3ff75144, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_trng_3ff75144, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_trng_3ff75144, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_trng_3ff75144, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_trng_3ff75144_P_status_EXISTS 1
#define DT_N_S_soc_S_trng_3ff75144_P_compatible {"espressif,esp32-trng"}
#define DT_N_S_soc_S_trng_3ff75144_P_compatible_IDX_0 "espressif,esp32-trng"
#define DT_N_S_soc_S_trng_3ff75144_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_trng_3ff75144_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_trng_3ff75144, compatible, 0)
#define DT_N_S_soc_S_trng_3ff75144_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_trng_3ff75144, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_trng_3ff75144_P_compatible_LEN 1
#define DT_N_S_soc_S_trng_3ff75144_P_compatible_EXISTS 1
#define DT_N_S_soc_S_trng_3ff75144_P_wakeup_source 0
#define DT_N_S_soc_S_trng_3ff75144_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/uart@3ff40000
 *
 * Node identifier: DT_N_S_soc_S_uart_3ff40000
 *
 * Binding (compatible = espressif,esp32-uart):
 *   $ZEPHYR_BASE/dts/bindings/serial/espressif,esp32-uart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_3ff40000_PATH "/soc/uart@3ff40000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_3ff40000_FULL_NAME "uart@3ff40000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_3ff40000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_uart_3ff40000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_3ff40000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_3ff40000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_3ff40000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_3ff40000_ORD 30

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_3ff40000_REQUIRES_ORDS \
	8, /* /soc */ \
	9, /* /soc/interrupt-controller@3ff00104 */ \
	20, /* /soc/rtc@3ff48000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_3ff40000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_3ff40000_EXISTS 1
#define DT_N_ALIAS_uart_0                DT_N_S_soc_S_uart_3ff40000
#define DT_N_INST_0_espressif_esp32_uart DT_N_S_soc_S_uart_3ff40000
#define DT_N_NODELABEL_uart0             DT_N_S_soc_S_uart_3ff40000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_3ff40000_REG_NUM 1
#define DT_N_S_soc_S_uart_3ff40000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_REG_IDX_0_VAL_ADDRESS 1072955392 /* 0x3ff40000 */
#define DT_N_S_soc_S_uart_3ff40000_REG_IDX_0_VAL_SIZE 1024 /* 0x400 */
#define DT_N_S_soc_S_uart_3ff40000_RANGES_NUM 0
#define DT_N_S_soc_S_uart_3ff40000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_uart_3ff40000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_3ff40000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_IRQ_IDX_0_VAL_irq 34
#define DT_N_S_soc_S_uart_3ff40000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_COMPAT_MATCHES_espressif_esp32_uart 1
#define DT_N_S_soc_S_uart_3ff40000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_3ff40000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_3ff40000_P_reg {1072955392 /* 0x3ff40000 */, 1024 /* 0x400 */}
#define DT_N_S_soc_S_uart_3ff40000_P_reg_IDX_0 1072955392
#define DT_N_S_soc_S_uart_3ff40000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_reg_IDX_1 1024
#define DT_N_S_soc_S_uart_3ff40000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff40000, reg, 0) \
	fn(DT_N_S_soc_S_uart_3ff40000, reg, 1)
#define DT_N_S_soc_S_uart_3ff40000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff40000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff40000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff40000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_interrupts {34 /* 0x22 */}
#define DT_N_S_soc_S_uart_3ff40000_P_interrupts_IDX_0 34
#define DT_N_S_soc_S_uart_3ff40000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff40000, interrupts, 0)
#define DT_N_S_soc_S_uart_3ff40000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff40000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff40000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_tx_pin 1
#define DT_N_S_soc_S_uart_3ff40000_P_tx_pin_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_rx_pin 3
#define DT_N_S_soc_S_uart_3ff40000_P_rx_pin_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_peripheral 0
#define DT_N_S_soc_S_uart_3ff40000_P_peripheral_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_current_speed 115200
#define DT_N_S_soc_S_uart_3ff40000_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_label "UART_0"
#define DT_N_S_soc_S_uart_3ff40000_P_label_STRING_TOKEN UART_0
#define DT_N_S_soc_S_uart_3ff40000_P_label_STRING_UPPER_TOKEN UART_0
#define DT_N_S_soc_S_uart_3ff40000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff40000, label, 0) \
	fn(DT_N_S_soc_S_uart_3ff40000, label, 1) \
	fn(DT_N_S_soc_S_uart_3ff40000, label, 2) \
	fn(DT_N_S_soc_S_uart_3ff40000, label, 3) \
	fn(DT_N_S_soc_S_uart_3ff40000, label, 4) \
	fn(DT_N_S_soc_S_uart_3ff40000, label, 5)
#define DT_N_S_soc_S_uart_3ff40000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff40000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff40000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff40000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff40000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff40000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff40000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff40000_P_label_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_3ff40000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_status "okay"
#define DT_N_S_soc_S_uart_3ff40000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_uart_3ff40000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_3ff40000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_uart_3ff40000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_uart_3ff40000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_3ff40000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff40000, status, 0) \
	fn(DT_N_S_soc_S_uart_3ff40000, status, 1) \
	fn(DT_N_S_soc_S_uart_3ff40000, status, 2) \
	fn(DT_N_S_soc_S_uart_3ff40000, status, 3)
#define DT_N_S_soc_S_uart_3ff40000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff40000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff40000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff40000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff40000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff40000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_compatible {"espressif,esp32-uart"}
#define DT_N_S_soc_S_uart_3ff40000_P_compatible_IDX_0 "espressif,esp32-uart"
#define DT_N_S_soc_S_uart_3ff40000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff40000, compatible, 0)
#define DT_N_S_soc_S_uart_3ff40000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff40000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff40000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_3ff40000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_uart_3ff40000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_uart_3ff40000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_uart_3ff40000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_uart_3ff40000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_uart_3ff40000_P_clocks_IDX_0_VAL_offset 1
#define DT_N_S_soc_S_uart_3ff40000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff40000, clocks, 0)
#define DT_N_S_soc_S_uart_3ff40000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff40000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff40000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_3ff40000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_3ff40000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/uart@3ff50000
 *
 * Node identifier: DT_N_S_soc_S_uart_3ff50000
 *
 * Binding (compatible = espressif,esp32-uart):
 *   $ZEPHYR_BASE/dts/bindings/serial/espressif,esp32-uart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_3ff50000_PATH "/soc/uart@3ff50000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_3ff50000_FULL_NAME "uart@3ff50000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_3ff50000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_uart_3ff50000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_3ff50000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_3ff50000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_3ff50000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_3ff50000_ORD 31

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_3ff50000_REQUIRES_ORDS \
	8, /* /soc */ \
	9, /* /soc/interrupt-controller@3ff00104 */ \
	20, /* /soc/rtc@3ff48000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_3ff50000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_3ff50000_EXISTS 1
#define DT_N_INST_1_espressif_esp32_uart DT_N_S_soc_S_uart_3ff50000
#define DT_N_NODELABEL_uart1             DT_N_S_soc_S_uart_3ff50000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_3ff50000_REG_NUM 1
#define DT_N_S_soc_S_uart_3ff50000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_REG_IDX_0_VAL_ADDRESS 1073020928 /* 0x3ff50000 */
#define DT_N_S_soc_S_uart_3ff50000_REG_IDX_0_VAL_SIZE 1024 /* 0x400 */
#define DT_N_S_soc_S_uart_3ff50000_RANGES_NUM 0
#define DT_N_S_soc_S_uart_3ff50000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_uart_3ff50000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_3ff50000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_IRQ_IDX_0_VAL_irq 35
#define DT_N_S_soc_S_uart_3ff50000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_COMPAT_MATCHES_espressif_esp32_uart 1
#define DT_N_S_soc_S_uart_3ff50000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_3ff50000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_3ff50000_P_reg {1073020928 /* 0x3ff50000 */, 1024 /* 0x400 */}
#define DT_N_S_soc_S_uart_3ff50000_P_reg_IDX_0 1073020928
#define DT_N_S_soc_S_uart_3ff50000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_reg_IDX_1 1024
#define DT_N_S_soc_S_uart_3ff50000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff50000, reg, 0) \
	fn(DT_N_S_soc_S_uart_3ff50000, reg, 1)
#define DT_N_S_soc_S_uart_3ff50000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff50000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff50000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff50000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_interrupts {35 /* 0x23 */}
#define DT_N_S_soc_S_uart_3ff50000_P_interrupts_IDX_0 35
#define DT_N_S_soc_S_uart_3ff50000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff50000, interrupts, 0)
#define DT_N_S_soc_S_uart_3ff50000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff50000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff50000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_peripheral 1
#define DT_N_S_soc_S_uart_3ff50000_P_peripheral_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_label "UART_1"
#define DT_N_S_soc_S_uart_3ff50000_P_label_STRING_TOKEN UART_1
#define DT_N_S_soc_S_uart_3ff50000_P_label_STRING_UPPER_TOKEN UART_1
#define DT_N_S_soc_S_uart_3ff50000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff50000, label, 0) \
	fn(DT_N_S_soc_S_uart_3ff50000, label, 1) \
	fn(DT_N_S_soc_S_uart_3ff50000, label, 2) \
	fn(DT_N_S_soc_S_uart_3ff50000, label, 3) \
	fn(DT_N_S_soc_S_uart_3ff50000, label, 4) \
	fn(DT_N_S_soc_S_uart_3ff50000, label, 5)
#define DT_N_S_soc_S_uart_3ff50000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff50000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff50000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff50000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff50000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff50000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff50000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff50000_P_label_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_3ff50000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_status "disabled"
#define DT_N_S_soc_S_uart_3ff50000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_uart_3ff50000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_3ff50000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_uart_3ff50000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_uart_3ff50000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_3ff50000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff50000, status, 0) \
	fn(DT_N_S_soc_S_uart_3ff50000, status, 1) \
	fn(DT_N_S_soc_S_uart_3ff50000, status, 2) \
	fn(DT_N_S_soc_S_uart_3ff50000, status, 3) \
	fn(DT_N_S_soc_S_uart_3ff50000, status, 4) \
	fn(DT_N_S_soc_S_uart_3ff50000, status, 5) \
	fn(DT_N_S_soc_S_uart_3ff50000, status, 6) \
	fn(DT_N_S_soc_S_uart_3ff50000, status, 7)
#define DT_N_S_soc_S_uart_3ff50000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff50000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff50000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff50000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff50000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff50000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff50000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff50000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff50000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff50000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_compatible {"espressif,esp32-uart"}
#define DT_N_S_soc_S_uart_3ff50000_P_compatible_IDX_0 "espressif,esp32-uart"
#define DT_N_S_soc_S_uart_3ff50000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff50000, compatible, 0)
#define DT_N_S_soc_S_uart_3ff50000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff50000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff50000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_3ff50000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_uart_3ff50000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_uart_3ff50000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_uart_3ff50000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_uart_3ff50000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_uart_3ff50000_P_clocks_IDX_0_VAL_offset 2
#define DT_N_S_soc_S_uart_3ff50000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff50000, clocks, 0)
#define DT_N_S_soc_S_uart_3ff50000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff50000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff50000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_3ff50000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_3ff50000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/uart@3ff6e000
 *
 * Node identifier: DT_N_S_soc_S_uart_3ff6e000
 *
 * Binding (compatible = espressif,esp32-uart):
 *   $ZEPHYR_BASE/dts/bindings/serial/espressif,esp32-uart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_3ff6e000_PATH "/soc/uart@3ff6e000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_3ff6e000_FULL_NAME "uart@3ff6e000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_3ff6e000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_uart_3ff6e000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_3ff6e000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_3ff6e000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_3ff6e000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_3ff6e000_ORD 32

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_3ff6e000_REQUIRES_ORDS \
	8, /* /soc */ \
	9, /* /soc/interrupt-controller@3ff00104 */ \
	20, /* /soc/rtc@3ff48000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_3ff6e000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_3ff6e000_EXISTS 1
#define DT_N_INST_2_espressif_esp32_uart DT_N_S_soc_S_uart_3ff6e000
#define DT_N_NODELABEL_uart2             DT_N_S_soc_S_uart_3ff6e000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_3ff6e000_REG_NUM 1
#define DT_N_S_soc_S_uart_3ff6e000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_REG_IDX_0_VAL_ADDRESS 1073143808 /* 0x3ff6e000 */
#define DT_N_S_soc_S_uart_3ff6e000_REG_IDX_0_VAL_SIZE 1024 /* 0x400 */
#define DT_N_S_soc_S_uart_3ff6e000_RANGES_NUM 0
#define DT_N_S_soc_S_uart_3ff6e000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_uart_3ff6e000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_3ff6e000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_IRQ_IDX_0_VAL_irq 36
#define DT_N_S_soc_S_uart_3ff6e000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_COMPAT_MATCHES_espressif_esp32_uart 1
#define DT_N_S_soc_S_uart_3ff6e000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_3ff6e000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_3ff6e000_P_reg {1073143808 /* 0x3ff6e000 */, 1024 /* 0x400 */}
#define DT_N_S_soc_S_uart_3ff6e000_P_reg_IDX_0 1073143808
#define DT_N_S_soc_S_uart_3ff6e000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_reg_IDX_1 1024
#define DT_N_S_soc_S_uart_3ff6e000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff6e000, reg, 0) \
	fn(DT_N_S_soc_S_uart_3ff6e000, reg, 1)
#define DT_N_S_soc_S_uart_3ff6e000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff6e000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff6e000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff6e000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_interrupts {36 /* 0x24 */}
#define DT_N_S_soc_S_uart_3ff6e000_P_interrupts_IDX_0 36
#define DT_N_S_soc_S_uart_3ff6e000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff6e000, interrupts, 0)
#define DT_N_S_soc_S_uart_3ff6e000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff6e000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff6e000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_peripheral 2
#define DT_N_S_soc_S_uart_3ff6e000_P_peripheral_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_label "UART_2"
#define DT_N_S_soc_S_uart_3ff6e000_P_label_STRING_TOKEN UART_2
#define DT_N_S_soc_S_uart_3ff6e000_P_label_STRING_UPPER_TOKEN UART_2
#define DT_N_S_soc_S_uart_3ff6e000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff6e000, label, 0) \
	fn(DT_N_S_soc_S_uart_3ff6e000, label, 1) \
	fn(DT_N_S_soc_S_uart_3ff6e000, label, 2) \
	fn(DT_N_S_soc_S_uart_3ff6e000, label, 3) \
	fn(DT_N_S_soc_S_uart_3ff6e000, label, 4) \
	fn(DT_N_S_soc_S_uart_3ff6e000, label, 5)
#define DT_N_S_soc_S_uart_3ff6e000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff6e000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff6e000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff6e000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff6e000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff6e000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff6e000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff6e000_P_label_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_3ff6e000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_status "disabled"
#define DT_N_S_soc_S_uart_3ff6e000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_uart_3ff6e000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_3ff6e000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_uart_3ff6e000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_uart_3ff6e000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_3ff6e000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff6e000, status, 0) \
	fn(DT_N_S_soc_S_uart_3ff6e000, status, 1) \
	fn(DT_N_S_soc_S_uart_3ff6e000, status, 2) \
	fn(DT_N_S_soc_S_uart_3ff6e000, status, 3) \
	fn(DT_N_S_soc_S_uart_3ff6e000, status, 4) \
	fn(DT_N_S_soc_S_uart_3ff6e000, status, 5) \
	fn(DT_N_S_soc_S_uart_3ff6e000, status, 6) \
	fn(DT_N_S_soc_S_uart_3ff6e000, status, 7)
#define DT_N_S_soc_S_uart_3ff6e000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff6e000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff6e000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff6e000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff6e000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff6e000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff6e000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff6e000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3ff6e000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff6e000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_compatible {"espressif,esp32-uart"}
#define DT_N_S_soc_S_uart_3ff6e000_P_compatible_IDX_0 "espressif,esp32-uart"
#define DT_N_S_soc_S_uart_3ff6e000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff6e000, compatible, 0)
#define DT_N_S_soc_S_uart_3ff6e000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff6e000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff6e000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_3ff6e000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_uart_3ff6e000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_uart_3ff6e000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_uart_3ff6e000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_uart_3ff6e000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_uart_3ff6e000_P_clocks_IDX_0_VAL_offset 3
#define DT_N_S_soc_S_uart_3ff6e000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff6e000, clocks, 0)
#define DT_N_S_soc_S_uart_3ff6e000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3ff6e000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3ff6e000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_3ff6e000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_3ff6e000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/watchdog@3ff5f048
 *
 * Node identifier: DT_N_S_soc_S_watchdog_3ff5f048
 *
 * Binding (compatible = espressif,esp32-watchdog):
 *   $ZEPHYR_BASE/dts/bindings/watchdog/espressif,esp32-watchdog.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_watchdog_3ff5f048_PATH "/soc/watchdog@3ff5f048"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_watchdog_3ff5f048_FULL_NAME "watchdog@3ff5f048"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_watchdog_3ff5f048_PARENT DT_N_S_soc
#define DT_N_S_soc_S_watchdog_3ff5f048_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_watchdog_3ff5f048_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_watchdog_3ff5f048_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_watchdog_3ff5f048_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_watchdog_3ff5f048_ORD 33

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_watchdog_3ff5f048_REQUIRES_ORDS \
	8, /* /soc */ \
	9, /* /soc/interrupt-controller@3ff00104 */ \
	20, /* /soc/rtc@3ff48000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_watchdog_3ff5f048_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_watchdog_3ff5f048_EXISTS 1
#define DT_N_INST_0_espressif_esp32_watchdog DT_N_S_soc_S_watchdog_3ff5f048
#define DT_N_NODELABEL_wdt0                  DT_N_S_soc_S_watchdog_3ff5f048

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_watchdog_3ff5f048_REG_NUM 1
#define DT_N_S_soc_S_watchdog_3ff5f048_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_REG_IDX_0_VAL_ADDRESS 1073082440 /* 0x3ff5f048 */
#define DT_N_S_soc_S_watchdog_3ff5f048_REG_IDX_0_VAL_SIZE 32 /* 0x20 */
#define DT_N_S_soc_S_watchdog_3ff5f048_RANGES_NUM 0
#define DT_N_S_soc_S_watchdog_3ff5f048_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_watchdog_3ff5f048_IRQ_NUM 1
#define DT_N_S_soc_S_watchdog_3ff5f048_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_IRQ_IDX_0_VAL_irq 16
#define DT_N_S_soc_S_watchdog_3ff5f048_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_COMPAT_MATCHES_espressif_esp32_watchdog 1
#define DT_N_S_soc_S_watchdog_3ff5f048_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_watchdog_3ff5f048_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_watchdog_3ff5f048_P_reg {1073082440 /* 0x3ff5f048 */, 32 /* 0x20 */}
#define DT_N_S_soc_S_watchdog_3ff5f048_P_reg_IDX_0 1073082440
#define DT_N_S_soc_S_watchdog_3ff5f048_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_reg_IDX_1 32
#define DT_N_S_soc_S_watchdog_3ff5f048_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_3ff5f048, reg, 0) \
	fn(DT_N_S_soc_S_watchdog_3ff5f048, reg, 1)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_3ff5f048, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_3ff5f048, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_reg_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_label "WDT_0"
#define DT_N_S_soc_S_watchdog_3ff5f048_P_label_STRING_TOKEN WDT_0
#define DT_N_S_soc_S_watchdog_3ff5f048_P_label_STRING_UPPER_TOKEN WDT_0
#define DT_N_S_soc_S_watchdog_3ff5f048_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_3ff5f048, label, 0) \
	fn(DT_N_S_soc_S_watchdog_3ff5f048, label, 1) \
	fn(DT_N_S_soc_S_watchdog_3ff5f048, label, 2) \
	fn(DT_N_S_soc_S_watchdog_3ff5f048, label, 3) \
	fn(DT_N_S_soc_S_watchdog_3ff5f048, label, 4)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_3ff5f048, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_3ff5f048, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_3ff5f048, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_3ff5f048, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_3ff5f048, label, 4, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_label_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_interrupts {16 /* 0x10 */}
#define DT_N_S_soc_S_watchdog_3ff5f048_P_interrupts_IDX_0 16
#define DT_N_S_soc_S_watchdog_3ff5f048_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_3ff5f048, interrupts, 0)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_3ff5f048, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status "okay"
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_3ff5f048, status, 0) \
	fn(DT_N_S_soc_S_watchdog_3ff5f048, status, 1) \
	fn(DT_N_S_soc_S_watchdog_3ff5f048, status, 2) \
	fn(DT_N_S_soc_S_watchdog_3ff5f048, status, 3)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_3ff5f048, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_3ff5f048, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_3ff5f048, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_3ff5f048, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_compatible {"espressif,esp32-watchdog"}
#define DT_N_S_soc_S_watchdog_3ff5f048_P_compatible_IDX_0 "espressif,esp32-watchdog"
#define DT_N_S_soc_S_watchdog_3ff5f048_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_3ff5f048, compatible, 0)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_3ff5f048, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_compatible_LEN 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_compatible_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_watchdog_3ff5f048_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_watchdog_3ff5f048_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_watchdog_3ff5f048_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_watchdog_3ff5f048_P_clocks_IDX_0_VAL_offset 8
#define DT_N_S_soc_S_watchdog_3ff5f048_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_3ff5f048, clocks, 0)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_3ff5f048, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_clocks_LEN 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_clocks_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_wakeup_source 0
#define DT_N_S_soc_S_watchdog_3ff5f048_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/watchdog@3ff60048
 *
 * Node identifier: DT_N_S_soc_S_watchdog_3ff60048
 *
 * Binding (compatible = espressif,esp32-watchdog):
 *   $ZEPHYR_BASE/dts/bindings/watchdog/espressif,esp32-watchdog.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_watchdog_3ff60048_PATH "/soc/watchdog@3ff60048"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_watchdog_3ff60048_FULL_NAME "watchdog@3ff60048"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_watchdog_3ff60048_PARENT DT_N_S_soc
#define DT_N_S_soc_S_watchdog_3ff60048_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_watchdog_3ff60048_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_watchdog_3ff60048_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_watchdog_3ff60048_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_watchdog_3ff60048_ORD 34

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_watchdog_3ff60048_REQUIRES_ORDS \
	8, /* /soc */ \
	9, /* /soc/interrupt-controller@3ff00104 */ \
	20, /* /soc/rtc@3ff48000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_watchdog_3ff60048_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_watchdog_3ff60048_EXISTS 1
#define DT_N_INST_1_espressif_esp32_watchdog DT_N_S_soc_S_watchdog_3ff60048
#define DT_N_NODELABEL_wdt1                  DT_N_S_soc_S_watchdog_3ff60048

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_watchdog_3ff60048_REG_NUM 1
#define DT_N_S_soc_S_watchdog_3ff60048_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_REG_IDX_0_VAL_ADDRESS 1073086536 /* 0x3ff60048 */
#define DT_N_S_soc_S_watchdog_3ff60048_REG_IDX_0_VAL_SIZE 32 /* 0x20 */
#define DT_N_S_soc_S_watchdog_3ff60048_RANGES_NUM 0
#define DT_N_S_soc_S_watchdog_3ff60048_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_watchdog_3ff60048_IRQ_NUM 1
#define DT_N_S_soc_S_watchdog_3ff60048_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_IRQ_IDX_0_VAL_irq 20
#define DT_N_S_soc_S_watchdog_3ff60048_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_COMPAT_MATCHES_espressif_esp32_watchdog 1
#define DT_N_S_soc_S_watchdog_3ff60048_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_watchdog_3ff60048_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_watchdog_3ff60048_P_reg {1073086536 /* 0x3ff60048 */, 32 /* 0x20 */}
#define DT_N_S_soc_S_watchdog_3ff60048_P_reg_IDX_0 1073086536
#define DT_N_S_soc_S_watchdog_3ff60048_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_reg_IDX_1 32
#define DT_N_S_soc_S_watchdog_3ff60048_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_3ff60048, reg, 0) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, reg, 1)
#define DT_N_S_soc_S_watchdog_3ff60048_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_3ff60048, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_3ff60048_P_reg_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_label "WDT_1"
#define DT_N_S_soc_S_watchdog_3ff60048_P_label_STRING_TOKEN WDT_1
#define DT_N_S_soc_S_watchdog_3ff60048_P_label_STRING_UPPER_TOKEN WDT_1
#define DT_N_S_soc_S_watchdog_3ff60048_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_3ff60048, label, 0) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, label, 1) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, label, 2) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, label, 3) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, label, 4)
#define DT_N_S_soc_S_watchdog_3ff60048_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_3ff60048, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, label, 4, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_3ff60048_P_label_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_interrupts {20 /* 0x14 */}
#define DT_N_S_soc_S_watchdog_3ff60048_P_interrupts_IDX_0 20
#define DT_N_S_soc_S_watchdog_3ff60048_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_3ff60048, interrupts, 0)
#define DT_N_S_soc_S_watchdog_3ff60048_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_3ff60048, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_3ff60048_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_status "disabled"
#define DT_N_S_soc_S_watchdog_3ff60048_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_watchdog_3ff60048_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_watchdog_3ff60048_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_watchdog_3ff60048_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_watchdog_3ff60048_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_watchdog_3ff60048_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_3ff60048, status, 0) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, status, 1) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, status, 2) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, status, 3) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, status, 4) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, status, 5) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, status, 6) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, status, 7)
#define DT_N_S_soc_S_watchdog_3ff60048_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_3ff60048, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_3ff60048_P_status_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_compatible {"espressif,esp32-watchdog"}
#define DT_N_S_soc_S_watchdog_3ff60048_P_compatible_IDX_0 "espressif,esp32-watchdog"
#define DT_N_S_soc_S_watchdog_3ff60048_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_3ff60048, compatible, 0)
#define DT_N_S_soc_S_watchdog_3ff60048_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_3ff60048, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_3ff60048_P_compatible_LEN 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_compatible_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_watchdog_3ff60048_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_watchdog_3ff60048_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_watchdog_3ff60048_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_watchdog_3ff60048_P_clocks_IDX_0_VAL_offset 9
#define DT_N_S_soc_S_watchdog_3ff60048_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_3ff60048, clocks, 0)
#define DT_N_S_soc_S_watchdog_3ff60048_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_3ff60048, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_3ff60048_P_clocks_LEN 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_clocks_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_wakeup_source 0
#define DT_N_S_soc_S_watchdog_3ff60048_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@3ff42000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_3ff42000
 *
 * Binding (compatible = espressif,esp32-flash-controller):
 *   $ZEPHYR_BASE/dts/bindings/flash_controller/espressif,esp32-flash-controller.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_3ff42000_PATH "/soc/flash-controller@3ff42000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_3ff42000_FULL_NAME "flash-controller@3ff42000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_flash_controller_3ff42000_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_3ff42000_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0) 
#define DT_N_S_soc_S_flash_controller_3ff42000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_3ff42000_ORD 35

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_3ff42000_REQUIRES_ORDS \
	8, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_3ff42000_SUPPORTS_ORDS \
	36, /* /soc/flash-controller@3ff42000/flash@0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_3ff42000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_flash_controller DT_N_S_soc_S_flash_controller_3ff42000
#define DT_N_NODELABEL_flash                         DT_N_S_soc_S_flash_controller_3ff42000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_3ff42000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_3ff42000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_REG_IDX_0_VAL_ADDRESS 1072963584 /* 0x3ff42000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_COMPAT_MATCHES_espressif_esp32_flash_controller 1
#define DT_N_S_soc_S_flash_controller_3ff42000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_3ff42000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_3ff42000_P_label "FLASH_CTRL"
#define DT_N_S_soc_S_flash_controller_3ff42000_P_label_STRING_TOKEN FLASH_CTRL
#define DT_N_S_soc_S_flash_controller_3ff42000_P_label_STRING_UPPER_TOKEN FLASH_CTRL
#define DT_N_S_soc_S_flash_controller_3ff42000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 0) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 1) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 2) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 3) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 4) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 5) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 6) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 7) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 8) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 9)
#define DT_N_S_soc_S_flash_controller_3ff42000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 9, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_P_reg {1072963584 /* 0x3ff42000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_flash_controller_3ff42000_P_reg_IDX_0 1072963584
#define DT_N_S_soc_S_flash_controller_3ff42000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_flash_controller_3ff42000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000, reg, 0) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, reg, 1)
#define DT_N_S_soc_S_flash_controller_3ff42000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_P_reg_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_P_compatible {"espressif,esp32-flash-controller"}
#define DT_N_S_soc_S_flash_controller_3ff42000_P_compatible_IDX_0 "espressif,esp32-flash-controller"
#define DT_N_S_soc_S_flash_controller_3ff42000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000, compatible, 0)
#define DT_N_S_soc_S_flash_controller_3ff42000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_P_compatible_LEN 1
#define DT_N_S_soc_S_flash_controller_3ff42000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_P_wakeup_source 0
#define DT_N_S_soc_S_flash_controller_3ff42000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@3ff42000/flash@0
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0
 *
 * Binding (compatible = soc-nv-flash):
 *   $ZEPHYR_BASE/dts/bindings/mtd/soc-nv-flash.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_PATH "/soc/flash-controller@3ff42000/flash@0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_FULL_NAME "flash@0"

/* Node parent (/soc/flash-controller@3ff42000) identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_PARENT DT_N_S_soc_S_flash_controller_3ff42000
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_ORD 36

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_REQUIRES_ORDS \
	35, /* /soc/flash-controller@3ff42000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_SUPPORTS_ORDS \
	37, /* /soc/flash-controller@3ff42000/flash@0/partitions */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_EXISTS 1
#define DT_N_INST_0_soc_nv_flash DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0
#define DT_N_NODELABEL_flash0    DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_REG_IDX_0_VAL_SIZE 4194304 /* 0x400000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_COMPAT_MATCHES_soc_nv_flash 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_label "FLASH_ESP32"
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_label_STRING_TOKEN FLASH_ESP32
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_label_STRING_UPPER_TOKEN FLASH_ESP32
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 0) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 1) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 2) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 3) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 4) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 5) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 6) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 7) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 8) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 9) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 10)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 10, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_erase_block_size 4096
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_erase_block_size_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_write_block_size 4
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_write_block_size_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status "okay"
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, status, 0) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, status, 1) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, status, 2) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, status, 3)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_compatible {"soc-nv-flash"}
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_compatible_IDX_0 "soc-nv-flash"
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, compatible, 0)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_compatible_LEN 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_reg {0 /* 0x0 */, 4194304 /* 0x400000 */}
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_reg_IDX_0 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_reg_IDX_1 4194304
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, reg, 0) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, reg, 1)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_reg_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_wakeup_source 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@3ff42000/flash@0/partitions
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions
 *
 * Binding (compatible = fixed-partitions):
 *   $ZEPHYR_BASE/dts/bindings/mtd/fixed-partitions.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_PATH "/soc/flash-controller@3ff42000/flash@0/partitions"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_FULL_NAME "partitions"

/* Node parent (/soc/flash-controller@3ff42000/flash@0) identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_PARENT DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_ORD 37

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_REQUIRES_ORDS \
	36, /* /soc/flash-controller@3ff42000/flash@0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_SUPPORTS_ORDS \
	38, /* /soc/flash-controller@3ff42000/flash@0/partitions/partition@1000 */ \
	39, /* /soc/flash-controller@3ff42000/flash@0/partitions/partition@10000 */ \
	40, /* /soc/flash-controller@3ff42000/flash@0/partitions/partition@110000 */ \
	41, /* /soc/flash-controller@3ff42000/flash@0/partitions/partition@210000 */ \
	42, /* /soc/flash-controller@3ff42000/flash@0/partitions/partition@250000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_EXISTS 1
#define DT_N_INST_0_fixed_partitions DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_REG_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_COMPAT_MATCHES_fixed_partitions 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /soc/flash-controller@3ff42000/flash@0/partitions/partition@1000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_PATH "/soc/flash-controller@3ff42000/flash@0/partitions/partition@1000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_FULL_NAME "partition@1000"

/* Node parent (/soc/flash-controller@3ff42000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_PARENT DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_ORD 38

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_REQUIRES_ORDS \
	37, /* /soc/flash-controller@3ff42000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_EXISTS 1
#define DT_N_NODELABEL_boot_partition DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_REG_IDX_0_VAL_ADDRESS 4096 /* 0x1000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_REG_IDX_0_VAL_SIZE 61440 /* 0xf000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_PARTITION_ID 0

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_label "mcuboot"
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_label_STRING_TOKEN mcuboot
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_label_STRING_UPPER_TOKEN MCUBOOT
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, label, 0) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, label, 1) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, label, 2) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, label, 3) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, label, 4) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, label, 5) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, label, 6)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, label, 6, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_read_only 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_reg {4096 /* 0x1000 */, 61440 /* 0xf000 */}
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_reg_IDX_0 4096
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_reg_IDX_1 61440
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, reg, 0) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, reg, 1)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@3ff42000/flash@0/partitions/partition@10000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_PATH "/soc/flash-controller@3ff42000/flash@0/partitions/partition@10000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_FULL_NAME "partition@10000"

/* Node parent (/soc/flash-controller@3ff42000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_PARENT DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_ORD 39

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_REQUIRES_ORDS \
	37, /* /soc/flash-controller@3ff42000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_EXISTS 1
#define DT_N_NODELABEL_slot0_partition DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_REG_IDX_0_VAL_ADDRESS 65536 /* 0x10000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_REG_IDX_0_VAL_SIZE 1048576 /* 0x100000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_PARTITION_ID 1

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_label "image-0"
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_label_STRING_TOKEN image_0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_label_STRING_UPPER_TOKEN IMAGE_0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, label, 0) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, label, 1) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, label, 2) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, label, 3) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, label, 4) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, label, 5) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, label, 6)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, label, 6, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_read_only 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_reg {65536 /* 0x10000 */, 1048576 /* 0x100000 */}
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_reg_IDX_0 65536
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_reg_IDX_1 1048576
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, reg, 0) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, reg, 1)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@3ff42000/flash@0/partitions/partition@110000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_PATH "/soc/flash-controller@3ff42000/flash@0/partitions/partition@110000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_FULL_NAME "partition@110000"

/* Node parent (/soc/flash-controller@3ff42000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_PARENT DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_ORD 40

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_REQUIRES_ORDS \
	37, /* /soc/flash-controller@3ff42000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_EXISTS 1
#define DT_N_NODELABEL_slot1_partition DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_REG_IDX_0_VAL_ADDRESS 1114112 /* 0x110000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_REG_IDX_0_VAL_SIZE 1048576 /* 0x100000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_PARTITION_ID 2

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_label "image-1"
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_label_STRING_TOKEN image_1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_label_STRING_UPPER_TOKEN IMAGE_1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, label, 0) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, label, 1) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, label, 2) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, label, 3) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, label, 4) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, label, 5) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, label, 6)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, label, 6, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_read_only 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_reg {1114112 /* 0x110000 */, 1048576 /* 0x100000 */}
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_reg_IDX_0 1114112
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_reg_IDX_1 1048576
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, reg, 0) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, reg, 1)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@3ff42000/flash@0/partitions/partition@210000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_PATH "/soc/flash-controller@3ff42000/flash@0/partitions/partition@210000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_FULL_NAME "partition@210000"

/* Node parent (/soc/flash-controller@3ff42000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_PARENT DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_ORD 41

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_REQUIRES_ORDS \
	37, /* /soc/flash-controller@3ff42000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_EXISTS 1
#define DT_N_NODELABEL_scratch_partition DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_REG_IDX_0_VAL_ADDRESS 2162688 /* 0x210000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_REG_IDX_0_VAL_SIZE 262144 /* 0x40000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_PARTITION_ID 3

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_label "image-scratch"
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_label_STRING_TOKEN image_scratch
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_label_STRING_UPPER_TOKEN IMAGE_SCRATCH
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 0) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 1) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 2) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 3) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 4) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 5) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 6) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 7) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 8) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 9) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 10) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 11) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 12)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, label, 12, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_read_only 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_reg {2162688 /* 0x210000 */, 262144 /* 0x40000 */}
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_reg_IDX_0 2162688
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_reg_IDX_1 262144
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, reg, 0) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, reg, 1)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@3ff42000/flash@0/partitions/partition@250000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_PATH "/soc/flash-controller@3ff42000/flash@0/partitions/partition@250000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_FULL_NAME "partition@250000"

/* Node parent (/soc/flash-controller@3ff42000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_PARENT DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_ORD 42

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_REQUIRES_ORDS \
	37, /* /soc/flash-controller@3ff42000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_EXISTS 1
#define DT_N_NODELABEL_storage_partition DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_REG_IDX_0_VAL_ADDRESS 2424832 /* 0x250000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_REG_IDX_0_VAL_SIZE 24576 /* 0x6000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_PARTITION_ID 4

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_label "storage"
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_label_STRING_TOKEN storage
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_label_STRING_UPPER_TOKEN STORAGE
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, label, 0) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, label, 1) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, label, 2) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, label, 3) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, label, 4) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, label, 5) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, label, 6)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, label, 6, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_read_only 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_reg {2424832 /* 0x250000 */, 24576 /* 0x6000 */}
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_reg_IDX_0 2424832
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_reg_IDX_1 24576
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, reg, 0) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, reg, 1)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/spi@3ff65000
 *
 * Node identifier: DT_N_S_soc_S_spi_3ff65000
 *
 * Binding (compatible = espressif,esp32-spi):
 *   $ZEPHYR_BASE/dts/bindings/spi/espressif,esp32-spi.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_spi_3ff65000_PATH "/soc/spi@3ff65000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_spi_3ff65000_FULL_NAME "spi@3ff65000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_spi_3ff65000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_spi_3ff65000_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0)
#define DT_N_S_soc_S_spi_3ff65000_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0) 
#define DT_N_S_soc_S_spi_3ff65000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_spi_3ff65000_ORD 43

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_spi_3ff65000_REQUIRES_ORDS \
	8, /* /soc */ \
	9, /* /soc/interrupt-controller@3ff00104 */ \
	20, /* /soc/rtc@3ff48000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_spi_3ff65000_SUPPORTS_ORDS \
	44, /* /soc/spi@3ff65000/ili9341@0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_spi_3ff65000_EXISTS 1
#define DT_N_INST_1_espressif_esp32_spi DT_N_S_soc_S_spi_3ff65000
#define DT_N_NODELABEL_spi3             DT_N_S_soc_S_spi_3ff65000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_spi_3ff65000_REG_NUM 1
#define DT_N_S_soc_S_spi_3ff65000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_REG_IDX_0_VAL_ADDRESS 1073106944 /* 0x3ff65000 */
#define DT_N_S_soc_S_spi_3ff65000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_spi_3ff65000_RANGES_NUM 0
#define DT_N_S_soc_S_spi_3ff65000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_spi_3ff65000_IRQ_NUM 1
#define DT_N_S_soc_S_spi_3ff65000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_IRQ_IDX_0_VAL_irq 31
#define DT_N_S_soc_S_spi_3ff65000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_COMPAT_MATCHES_espressif_esp32_spi 1
#define DT_N_S_soc_S_spi_3ff65000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_spi_3ff65000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_spi_3ff65000_P_reg {1073106944 /* 0x3ff65000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_spi_3ff65000_P_reg_IDX_0 1073106944
#define DT_N_S_soc_S_spi_3ff65000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_spi_3ff65000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000, reg, 0) \
	fn(DT_N_S_soc_S_spi_3ff65000, reg, 1)
#define DT_N_S_soc_S_spi_3ff65000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_P_reg_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_interrupts {31 /* 0x1f */}
#define DT_N_S_soc_S_spi_3ff65000_P_interrupts_IDX_0 31
#define DT_N_S_soc_S_spi_3ff65000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000, interrupts, 0)
#define DT_N_S_soc_S_spi_3ff65000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_miso_pin 25
#define DT_N_S_soc_S_spi_3ff65000_P_miso_pin_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_mosi_pin 23
#define DT_N_S_soc_S_spi_3ff65000_P_mosi_pin_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_sclk_pin 19
#define DT_N_S_soc_S_spi_3ff65000_P_sclk_pin_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_csel_pin 22
#define DT_N_S_soc_S_spi_3ff65000_P_csel_pin_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_use_iomux 1
#define DT_N_S_soc_S_spi_3ff65000_P_use_iomux_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_half_duplex 0
#define DT_N_S_soc_S_spi_3ff65000_P_half_duplex_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_dummy_comp 0
#define DT_N_S_soc_S_spi_3ff65000_P_dummy_comp_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_sio 0
#define DT_N_S_soc_S_spi_3ff65000_P_sio_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_dma 0
#define DT_N_S_soc_S_spi_3ff65000_P_dma_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_clk_as_cs 0
#define DT_N_S_soc_S_spi_3ff65000_P_clk_as_cs_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_positive_cs 0
#define DT_N_S_soc_S_spi_3ff65000_P_positive_cs_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_label "SPI_3"
#define DT_N_S_soc_S_spi_3ff65000_P_label_STRING_TOKEN SPI_3
#define DT_N_S_soc_S_spi_3ff65000_P_label_STRING_UPPER_TOKEN SPI_3
#define DT_N_S_soc_S_spi_3ff65000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000, label, 0) \
	fn(DT_N_S_soc_S_spi_3ff65000, label, 1) \
	fn(DT_N_S_soc_S_spi_3ff65000, label, 2) \
	fn(DT_N_S_soc_S_spi_3ff65000, label, 3) \
	fn(DT_N_S_soc_S_spi_3ff65000, label, 4)
#define DT_N_S_soc_S_spi_3ff65000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000, label, 4, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_P_label_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_status "okay"
#define DT_N_S_soc_S_spi_3ff65000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_spi_3ff65000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_spi_3ff65000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_spi_3ff65000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_spi_3ff65000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_spi_3ff65000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000, status, 0) \
	fn(DT_N_S_soc_S_spi_3ff65000, status, 1) \
	fn(DT_N_S_soc_S_spi_3ff65000, status, 2) \
	fn(DT_N_S_soc_S_spi_3ff65000, status, 3)
#define DT_N_S_soc_S_spi_3ff65000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_P_status_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_compatible {"espressif,esp32-spi"}
#define DT_N_S_soc_S_spi_3ff65000_P_compatible_IDX_0 "espressif,esp32-spi"
#define DT_N_S_soc_S_spi_3ff65000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000, compatible, 0)
#define DT_N_S_soc_S_spi_3ff65000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_P_compatible_LEN 1
#define DT_N_S_soc_S_spi_3ff65000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_spi_3ff65000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_spi_3ff65000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_3ff00104
#define DT_N_S_soc_S_spi_3ff65000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_spi_3ff65000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_spi_3ff65000_P_clocks_IDX_0_VAL_offset 20
#define DT_N_S_soc_S_spi_3ff65000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000, clocks, 0)
#define DT_N_S_soc_S_spi_3ff65000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_P_clocks_LEN 1
#define DT_N_S_soc_S_spi_3ff65000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_wakeup_source 0
#define DT_N_S_soc_S_spi_3ff65000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/spi@3ff65000/ili9341@0
 *
 * Node identifier: DT_N_S_soc_S_spi_3ff65000_S_ili9341_0
 *
 * Binding (compatible = ilitek,ili9341):
 *   $ZEPHYR_BASE/dts/bindings/display/ilitek,ili9341.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_PATH "/soc/spi@3ff65000/ili9341@0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_FULL_NAME "ili9341@0"

/* Node parent (/soc/spi@3ff65000) identifier: */
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_PARENT DT_N_S_soc_S_spi_3ff65000
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_ORD 44

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_REQUIRES_ORDS \
	10, /* /soc/gpio@3ff44000 */ \
	43, /* /soc/spi@3ff65000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_EXISTS 1
#define DT_N_INST_0_ilitek_ili9341 DT_N_S_soc_S_spi_3ff65000_S_ili9341_0
#define DT_N_NODELABEL_ili9341     DT_N_S_soc_S_spi_3ff65000_S_ili9341_0

/* Bus info (controller: '/soc/spi@3ff65000', type: 'spi') */
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_BUS_spi 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_BUS DT_N_S_soc_S_spi_3ff65000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_REG_NUM 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_RANGES_NUM 0
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_IRQ_NUM 0
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_COMPAT_MATCHES_ilitek_ili9341 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrla {57 /* 0x39 */, 44 /* 0x2c */, 0 /* 0x0 */, 52 /* 0x34 */, 2 /* 0x2 */}
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrla_IDX_0 57
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrla_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrla_IDX_1 44
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrla_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrla_IDX_2 0
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrla_IDX_2_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrla_IDX_3 52
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrla_IDX_3_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrla_IDX_4 2
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrla_IDX_4_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrla_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pwctrla, 0) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pwctrla, 1) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pwctrla, 2) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pwctrla, 3) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pwctrla, 4)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrla_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pwctrla, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pwctrla, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pwctrla, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pwctrla, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pwctrla, 4, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrla_LEN 5
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrla_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrlb {0 /* 0x0 */, 139 /* 0x8b */, 48 /* 0x30 */}
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrlb_IDX_0 0
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrlb_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrlb_IDX_1 139
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrlb_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrlb_IDX_2 48
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrlb_IDX_2_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrlb_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pwctrlb, 0) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pwctrlb, 1) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pwctrlb, 2)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrlb_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pwctrlb, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pwctrlb, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pwctrlb, 2, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrlb_LEN 3
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrlb_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwseqctrl {85 /* 0x55 */, 1 /* 0x1 */, 35 /* 0x23 */, 1 /* 0x1 */}
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwseqctrl_IDX_0 85
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwseqctrl_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwseqctrl_IDX_1 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwseqctrl_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwseqctrl_IDX_2 35
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwseqctrl_IDX_2_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwseqctrl_IDX_3 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwseqctrl_IDX_3_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwseqctrl_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pwseqctrl, 0) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pwseqctrl, 1) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pwseqctrl, 2) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pwseqctrl, 3)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwseqctrl_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pwseqctrl, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pwseqctrl, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pwseqctrl, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pwseqctrl, 3, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwseqctrl_LEN 4
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwseqctrl_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_timctrla {132 /* 0x84 */, 17 /* 0x11 */, 122 /* 0x7a */}
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_timctrla_IDX_0 132
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_timctrla_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_timctrla_IDX_1 17
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_timctrla_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_timctrla_IDX_2 122
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_timctrla_IDX_2_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_timctrla_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, timctrla, 0) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, timctrla, 1) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, timctrla, 2)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_timctrla_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, timctrla, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, timctrla, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, timctrla, 2, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_timctrla_LEN 3
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_timctrla_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_timctrlb {0 /* 0x0 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_timctrlb_IDX_0 0
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_timctrlb_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_timctrlb_IDX_1 0
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_timctrlb_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_timctrlb_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, timctrlb, 0) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, timctrlb, 1)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_timctrlb_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, timctrlb, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, timctrlb, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_timctrlb_LEN 2
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_timctrlb_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pumpratioctrl {16 /* 0x10 */}
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pumpratioctrl_IDX_0 16
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pumpratioctrl_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pumpratioctrl_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pumpratioctrl, 0)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pumpratioctrl_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pumpratioctrl, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pumpratioctrl_LEN 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pumpratioctrl_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_enable3g {2 /* 0x2 */}
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_enable3g_IDX_0 2
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_enable3g_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_enable3g_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, enable3g, 0)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_enable3g_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, enable3g, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_enable3g_LEN 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_enable3g_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_etmod {6 /* 0x6 */}
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_etmod_IDX_0 6
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_etmod_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_etmod_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, etmod, 0)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_etmod_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, etmod, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_etmod_LEN 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_etmod_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_gamset {1 /* 0x1 */}
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_gamset_IDX_0 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_gamset_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_gamset_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, gamset, 0)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_gamset_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, gamset, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_gamset_LEN 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_gamset_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_frmctr1 {0 /* 0x0 */, 27 /* 0x1b */}
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_frmctr1_IDX_0 0
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_frmctr1_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_frmctr1_IDX_1 27
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_frmctr1_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_frmctr1_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, frmctr1, 0) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, frmctr1, 1)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_frmctr1_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, frmctr1, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, frmctr1, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_frmctr1_LEN 2
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_frmctr1_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_disctrl {10 /* 0xa */, 130 /* 0x82 */, 39 /* 0x27 */}
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_disctrl_IDX_0 10
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_disctrl_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_disctrl_IDX_1 130
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_disctrl_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_disctrl_IDX_2 39
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_disctrl_IDX_2_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_disctrl_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, disctrl, 0) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, disctrl, 1) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, disctrl, 2)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_disctrl_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, disctrl, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, disctrl, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, disctrl, 2, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_disctrl_LEN 3
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_disctrl_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrl1 {33 /* 0x21 */}
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrl1_IDX_0 33
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrl1_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrl1_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pwctrl1, 0)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrl1_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pwctrl1, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrl1_LEN 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrl1_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrl2 {16 /* 0x10 */}
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrl2_IDX_0 16
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrl2_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrl2_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pwctrl2, 0)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrl2_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pwctrl2, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrl2_LEN 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pwctrl2_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_vmctrl1 {49 /* 0x31 */, 60 /* 0x3c */}
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_vmctrl1_IDX_0 49
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_vmctrl1_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_vmctrl1_IDX_1 60
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_vmctrl1_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_vmctrl1_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, vmctrl1, 0) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, vmctrl1, 1)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_vmctrl1_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, vmctrl1, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, vmctrl1, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_vmctrl1_LEN 2
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_vmctrl1_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_vmctrl2 {192 /* 0xc0 */}
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_vmctrl2_IDX_0 192
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_vmctrl2_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_vmctrl2_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, vmctrl2, 0)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_vmctrl2_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, vmctrl2, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_vmctrl2_LEN 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_vmctrl2_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl {15 /* 0xf */, 34 /* 0x22 */, 31 /* 0x1f */, 10 /* 0xa */, 14 /* 0xe */, 6 /* 0x6 */, 77 /* 0x4d */, 118 /* 0x76 */, 59 /* 0x3b */, 3 /* 0x3 */, 14 /* 0xe */, 4 /* 0x4 */, 19 /* 0x13 */, 14 /* 0xe */, 12 /* 0xc */}
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_0 15
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_1 34
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_2 31
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_2_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_3 10
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_3_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_4 14
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_4_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_5 6
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_5_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_6 77
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_6_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_7 118
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_7_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_8 59
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_8_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_9 3
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_9_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_10 14
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_10_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_11 4
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_11_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_12 19
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_12_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_13 14
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_13_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_14 12
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_IDX_14_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 0) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 1) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 2) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 3) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 4) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 5) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 6) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 7) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 8) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 9) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 10) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 11) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 12) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 13) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 14)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 12, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 13, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, pgamctrl, 14, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_LEN 15
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pgamctrl_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl {12 /* 0xc */, 35 /* 0x23 */, 38 /* 0x26 */, 4 /* 0x4 */, 16 /* 0x10 */, 4 /* 0x4 */, 57 /* 0x39 */, 36 /* 0x24 */, 75 /* 0x4b */, 3 /* 0x3 */, 11 /* 0xb */, 11 /* 0xb */, 51 /* 0x33 */, 55 /* 0x37 */, 15 /* 0xf */}
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_0 12
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_1 35
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_2 38
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_2_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_3 4
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_3_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_4 16
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_4_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_5 4
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_5_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_6 57
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_6_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_7 36
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_7_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_8 75
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_8_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_9 3
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_9_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_10 11
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_10_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_11 11
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_11_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_12 51
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_12_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_13 55
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_13_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_14 15
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_IDX_14_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 0) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 1) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 2) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 3) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 4) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 5) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 6) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 7) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 8) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 9) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 10) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 11) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 12) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 13) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 14)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 12, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 13, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, ngamctrl, 14, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_LEN 15
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_ngamctrl_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_reset_gpios_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_reset_gpios_IDX_0_PH DT_N_S_soc_S_gpio_3ff44000
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_reset_gpios_IDX_0_VAL_pin 18
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_reset_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_reset_gpios_IDX_0_VAL_flags 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_reset_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_reset_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, reset_gpios, 0)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_reset_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, reset_gpios, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_reset_gpios_LEN 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_reset_gpios_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_cmd_data_gpios_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_cmd_data_gpios_IDX_0_PH DT_N_S_soc_S_gpio_3ff44000
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_cmd_data_gpios_IDX_0_VAL_pin 21
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_cmd_data_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_cmd_data_gpios_IDX_0_VAL_flags 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_cmd_data_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_cmd_data_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, cmd_data_gpios, 0)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_cmd_data_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, cmd_data_gpios, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_cmd_data_gpios_LEN 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_cmd_data_gpios_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pixel_format 0
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pixel_format_ENUM_IDX 0
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_pixel_format_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_rotation 0
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_rotation_ENUM_IDX 0
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_rotation_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_display_inversion 0
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_display_inversion_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_reg {0 /* 0x0 */}
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_reg_IDX_0 0
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, reg, 0)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, reg, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_reg_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_spi_max_frequency 25000000
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_spi_max_frequency_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_label "DISPLAY"
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_label_STRING_TOKEN DISPLAY
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_label_STRING_UPPER_TOKEN DISPLAY
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, label, 0) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, label, 1) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, label, 2) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, label, 3) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, label, 4) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, label, 5) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, label, 6)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, label, 6, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_label_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_duplex 0
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_duplex_ENUM_IDX 0
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_duplex_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_frame_format 0
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_frame_format_ENUM_IDX 0
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_frame_format_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_compatible {"ilitek,ili9341"}
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_compatible_IDX_0 "ilitek,ili9341"
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, compatible, 0)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_compatible_LEN 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_wakeup_source 0
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_height 320
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_height_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_width 240
#define DT_N_S_soc_S_spi_3ff65000_S_ili9341_0_P_width_EXISTS 1

/*
 * Chosen nodes
 */
#define DT_CHOSEN_zephyr_entropy                 DT_N_S_soc_S_trng_3ff75144
#define DT_CHOSEN_zephyr_entropy_EXISTS          1
#define DT_CHOSEN_zephyr_flash_controller        DT_N_S_soc_S_flash_controller_3ff42000
#define DT_CHOSEN_zephyr_flash_controller_EXISTS 1
#define DT_CHOSEN_zephyr_sram                    DT_N_S_soc_S_memory_3ffb0000
#define DT_CHOSEN_zephyr_sram_EXISTS             1
#define DT_CHOSEN_zephyr_console                 DT_N_S_soc_S_uart_3ff40000
#define DT_CHOSEN_zephyr_console_EXISTS          1
#define DT_CHOSEN_zephyr_shell_uart              DT_N_S_soc_S_uart_3ff40000
#define DT_CHOSEN_zephyr_shell_uart_EXISTS       1
#define DT_CHOSEN_zephyr_flash                   DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0
#define DT_CHOSEN_zephyr_flash_EXISTS            1
#define DT_CHOSEN_zephyr_display                 DT_N_S_soc_S_spi_3ff65000_S_ili9341_0
#define DT_CHOSEN_zephyr_display_EXISTS          1
#define DT_COMPAT_fixed_partitions_LABEL_mcuboot DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_1000
#define DT_COMPAT_fixed_partitions_LABEL_mcuboot_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_image_0 DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_10000
#define DT_COMPAT_fixed_partitions_LABEL_image_0_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_image_1 DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_110000
#define DT_COMPAT_fixed_partitions_LABEL_image_1_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_image_scratch DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_210000
#define DT_COMPAT_fixed_partitions_LABEL_image_scratch_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_storage DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_250000
#define DT_COMPAT_fixed_partitions_LABEL_storage_EXISTS 1

/*
 * Macros for compatibles with status "okay" nodes
 */
#define DT_COMPAT_HAS_OKAY_espressif_esp32 1
#define DT_COMPAT_HAS_OKAY_simple_bus 1
#define DT_COMPAT_HAS_OKAY_mmio_sram 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_intc 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_rtc 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_flash_controller 1
#define DT_COMPAT_HAS_OKAY_soc_nv_flash 1
#define DT_COMPAT_HAS_OKAY_fixed_partitions 1
#define DT_COMPAT_HAS_OKAY_espressif_crosscore_interrupt 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_uart 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_pinmux 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_gpio 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_i2c 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_trng 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_watchdog 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_spi 1
#define DT_COMPAT_HAS_OKAY_ilitek_ili9341 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_timer 1
#define DT_COMPAT_HAS_OKAY_cdns_tensilica_xtensa_lx6 1
#define DT_COMPAT_HAS_OKAY_gpio_leds 1

/*
 * Macros for status "okay" instances of each compatible
 */
#define DT_N_INST_espressif_esp32_NUM_OKAY 1
#define DT_N_INST_simple_bus_NUM_OKAY 1
#define DT_N_INST_mmio_sram_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_intc_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_rtc_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_flash_controller_NUM_OKAY 1
#define DT_N_INST_soc_nv_flash_NUM_OKAY 1
#define DT_N_INST_fixed_partitions_NUM_OKAY 1
#define DT_N_INST_espressif_crosscore_interrupt_NUM_OKAY 2
#define DT_N_INST_espressif_esp32_uart_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_pinmux_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_gpio_NUM_OKAY 2
#define DT_N_INST_espressif_esp32_i2c_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_trng_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_watchdog_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_spi_NUM_OKAY 2
#define DT_N_INST_ilitek_ili9341_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_timer_NUM_OKAY 4
#define DT_N_INST_cdns_tensilica_xtensa_lx6_NUM_OKAY 2
#define DT_N_INST_gpio_leds_NUM_OKAY 1
#define DT_FOREACH_OKAY_espressif_esp32(fn) fn(DT_N)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32(fn, ...) fn(DT_N, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_simple_bus(fn) fn(DT_N_S_soc)
#define DT_FOREACH_OKAY_VARGS_simple_bus(fn, ...) fn(DT_N_S_soc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_simple_bus(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_simple_bus(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_mmio_sram(fn) fn(DT_N_S_soc_S_memory_3ffb0000)
#define DT_FOREACH_OKAY_VARGS_mmio_sram(fn, ...) fn(DT_N_S_soc_S_memory_3ffb0000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_mmio_sram(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_mmio_sram(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_intc(fn) fn(DT_N_S_soc_S_interrupt_controller_3ff00104)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_intc(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_3ff00104, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_intc(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_intc(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_rtc(fn) fn(DT_N_S_soc_S_rtc_3ff48000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_rtc(fn, ...) fn(DT_N_S_soc_S_rtc_3ff48000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_rtc(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_rtc(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_flash_controller(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_flash_controller(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_flash_controller(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_flash_controller(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_soc_nv_flash(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0)
#define DT_FOREACH_OKAY_VARGS_soc_nv_flash(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_soc_nv_flash(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_soc_nv_flash(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_fixed_partitions(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions)
#define DT_FOREACH_OKAY_VARGS_fixed_partitions(fn, ...) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_fixed_partitions(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_fixed_partitions(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_crosscore_interrupt(fn) fn(DT_N_S_soc_S_ipi_3f4c0058) fn(DT_N_S_soc_S_ipi_3f4c005c)
#define DT_FOREACH_OKAY_VARGS_espressif_crosscore_interrupt(fn, ...) fn(DT_N_S_soc_S_ipi_3f4c0058, __VA_ARGS__) fn(DT_N_S_soc_S_ipi_3f4c005c, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_crosscore_interrupt(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_crosscore_interrupt(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_uart(fn) fn(DT_N_S_soc_S_uart_3ff40000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_uart(fn, ...) fn(DT_N_S_soc_S_uart_3ff40000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_uart(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_uart(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_pinmux(fn) fn(DT_N_S_soc_S_pinmux_3ff49000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_pinmux(fn, ...) fn(DT_N_S_soc_S_pinmux_3ff49000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_pinmux(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_pinmux(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_gpio(fn) fn(DT_N_S_soc_S_gpio_3ff44000) fn(DT_N_S_soc_S_gpio_3ff44800)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_gpio(fn, ...) fn(DT_N_S_soc_S_gpio_3ff44000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_3ff44800, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_gpio(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_gpio(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_i2c(fn) fn(DT_N_S_soc_S_i2c_3ff53000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_i2c(fn, ...) fn(DT_N_S_soc_S_i2c_3ff53000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_i2c(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_i2c(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_trng(fn) fn(DT_N_S_soc_S_trng_3ff75144)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_trng(fn, ...) fn(DT_N_S_soc_S_trng_3ff75144, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_trng(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_trng(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_watchdog(fn) fn(DT_N_S_soc_S_watchdog_3ff5f048)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_watchdog(fn, ...) fn(DT_N_S_soc_S_watchdog_3ff5f048, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_watchdog(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_watchdog(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_spi(fn) fn(DT_N_S_soc_S_spi_3ff64000) fn(DT_N_S_soc_S_spi_3ff65000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_spi(fn, ...) fn(DT_N_S_soc_S_spi_3ff64000, __VA_ARGS__) fn(DT_N_S_soc_S_spi_3ff65000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_spi(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_spi(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_ilitek_ili9341(fn) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0)
#define DT_FOREACH_OKAY_VARGS_ilitek_ili9341(fn, ...) fn(DT_N_S_soc_S_spi_3ff65000_S_ili9341_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_ilitek_ili9341(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_ilitek_ili9341(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_timer(fn) fn(DT_N_S_soc_S_counter_3ff5f000) fn(DT_N_S_soc_S_counter_3ff5f024) fn(DT_N_S_soc_S_counter_3ff60000) fn(DT_N_S_soc_S_counter_3ff60024)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_timer(fn, ...) fn(DT_N_S_soc_S_counter_3ff5f000, __VA_ARGS__) fn(DT_N_S_soc_S_counter_3ff5f024, __VA_ARGS__) fn(DT_N_S_soc_S_counter_3ff60000, __VA_ARGS__) fn(DT_N_S_soc_S_counter_3ff60024, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_timer(fn) fn(0) fn(1) fn(2) fn(3)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_timer(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__) fn(2, __VA_ARGS__) fn(3, __VA_ARGS__)
#define DT_FOREACH_OKAY_cdns_tensilica_xtensa_lx6(fn) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_cpu_1)
#define DT_FOREACH_OKAY_VARGS_cdns_tensilica_xtensa_lx6(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_1, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_cdns_tensilica_xtensa_lx6(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_cdns_tensilica_xtensa_lx6(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_gpio_leds(fn) fn(DT_N_S_leds)
#define DT_FOREACH_OKAY_VARGS_gpio_leds(fn, ...) fn(DT_N_S_leds, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_gpio_leds(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_gpio_leds(fn, ...) fn(0, __VA_ARGS__)

/*
 * Bus information for status "okay" nodes of each compatible
 */
#define DT_COMPAT_ilitek_ili9341_BUS_spi 1
